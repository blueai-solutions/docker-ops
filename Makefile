# =============================================================================
# Makefile - BlueAI Docker Ops
# =============================================================================
# Autor: BlueAI Solutions
# Vers√£o: 1.0.0
# Descri√ß√£o: Automa√ß√£o de desenvolvimento, teste e deploy
# =============================================================================

# Sourcing da configura√ß√£o centralizada
-include config/version-config.sh

# Vari√°veis com fallback para valores padr√£o
PROJECT_NAME ?= BlueAI Docker Ops
PROJECT_VERSION ?= $(shell cat VERSION 2>/dev/null || echo 'unknown')
GIT_BRANCH ?= $(shell git branch --show-current 2>/dev/null || echo 'unknown')
GIT_COMMIT ?= $(shell git rev-parse --short HEAD 2>/dev/null || echo 'unknown')

# Verificar se a configura√ß√£o foi carregada
ifeq ($(SYSTEM_NAME),)
    $(warning ‚ö†Ô∏è  Configura√ß√£o n√£o encontrada. Execute 'make config-clean' primeiro.)
    SYSTEM_NAME := $(PROJECT_NAME)
    SYSTEM_DESCRIPTION := Sistema automatizado de backup para containers Docker
    SYSTEM_AUTHOR := BlueAI Solutions
    SYSTEM_LICENSE := MIT
else
    PROJECT_NAME := $(SYSTEM_NAME)
    PROJECT_VERSION := $(APP_VERSION)
endif

# Cores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Fun√ß√µes de log
define log_info
	@echo -e "$(BLUE)‚ÑπÔ∏è  $(1)$(NC)"
endef

define log_success
	@echo -e "$(GREEN)‚úÖ $(1)$(NC)"
endef

define log_warning
	@echo -e "$(YELLOW)‚ö†Ô∏è  $(1)$(NC)"
endef

define log_error
	@echo -e "$(RED)‚ùå $(1)$(NC)"
endef

# Target padr√£o
.PHONY: help
help: ## Mostrar esta ajuda
	@echo "$(PROJECT_NAME) - Makefile de Automa√ß√£o"
	@echo "======================================"
	@echo "Vers√£o: $(PROJECT_VERSION)"
	@echo "Branch: $(GIT_BRANCH)"
	@echo "Commit: $(GIT_COMMIT)"
	@echo ""
	@echo "Targets dispon√≠veis:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# =============================================================================
# DESENVOLVIMENTO
# =============================================================================

.PHONY: dev-setup
dev-setup: ## Configurar ambiente de desenvolvimento
	$(call log_info,"Configurando ambiente de desenvolvimento...")
	@chmod +x blueai-docker-ops.sh
	@chmod +x scripts/**/*.sh
	@chmod +x install/*.sh
	$(call log_success,"Ambiente de desenvolvimento configurado!")

.PHONY: test
test: ## Executar testes do sistema
	$(call log_info,"Executando testes do sistema...")
	@./scripts/utils/test-system.sh
	$(call log_success,"Testes conclu√≠dos!")

.PHONY: test-notifications
test-notifications: ## Testar sistema de notifica√ß√µes
	$(call log_info,"Testando notifica√ß√µes...")
	@./scripts/notifications/test-notifications.sh
	$(call log_success,"Teste de notifica√ß√µes conclu√≠do!")

.PHONY: validate
validate: ## Validar sintaxe dos scripts
	$(call log_info,"Validando sintaxe dos scripts...")
	@find scripts/ -name "*.sh" -exec bash -n {} \;
	@bash -n blueai-docker-ops.sh
	@bash -n install/*.sh
	$(call log_success,"Valida√ß√£o de sintaxe conclu√≠da!")

# =============================================================================
# CONFIGURA√á√ÉO
# =============================================================================

.PHONY: config-clean
config-clean: ## Limpar configura√ß√µes locais usando templates
	$(call log_info,"Limpando configura√ß√µes locais...")
	@./scripts/utils/config-setup.sh --force
	$(call log_success,"Configura√ß√µes limpas criadas!")

.PHONY: config-interactive
config-interactive: ## Configura√ß√£o interativa do sistema
	$(call log_info,"Iniciando configura√ß√£o interativa...")
	@./scripts/utils/config-setup.sh --interactive
	$(call log_success,"Configura√ß√£o interativa conclu√≠da!")

.PHONY: config-email
config-email: ## Configurar email (use EMAIL=seu@email.com)
	$(call log_info,"Configurando email...")
	@if [ -z "$(EMAIL)" ]; then \
		echo "Use: make config-email EMAIL=seu@email.com"; \
		exit 1; \
	fi
	@./scripts/utils/config-setup.sh --email "$(EMAIL)"
	$(call log_success,"Email configurado: $(EMAIL)")

.PHONY: config-schedule
config-schedule: ## Configurar hor√°rio (use HOUR=2 MIN=30)
	$(call log_info,"Configurando hor√°rio...")
	@if [ -z "$(HOUR)" ] || [ -z "$(MIN)" ]; then \
		echo "Use: make config-schedule HOUR=2 MIN=30"; \
		exit 1; \
	fi
	@./scripts/utils/config-setup.sh --schedule "$(HOUR)" --schedule-min "$(MIN)"
	$(call log_success,"Hor√°rio configurado: $(HOUR):$(MIN)")

# =============================================================================
# LAUNCHAGENT
# =============================================================================

.PHONY: launchagent-install
launchagent-install: ## Instalar LaunchAgent
	$(call log_info,"Instalando LaunchAgent...")
	@./scripts/install/install-launchagent.sh install
	$(call log_success,"LaunchAgent instalado!")

.PHONY: launchagent-status
launchagent-status: ## Verificar status do LaunchAgent
	$(call log_info,"Verificando status do LaunchAgent...")
	@./scripts/install/install-launchagent.sh status

.PHONY: launchagent-schedule
launchagent-schedule: ## Configurar hor√°rio do LaunchAgent
	$(call log_info,"Configurando hor√°rio do LaunchAgent...")
	@./scripts/install/install-launchagent.sh schedule

.PHONY: launchagent-test
launchagent-test: ## Testar LaunchAgent
	$(call log_info,"Testando LaunchAgent...")
	@./scripts/install/install-launchagent.sh test-launchagent

.PHONY: launchagent-uninstall
launchagent-uninstall: ## Desinstalar LaunchAgent
	$(call log_info,"Desinstalando LaunchAgent...")
	@./scripts/install/install-launchagent.sh uninstall
	$(call log_success,"LaunchAgent desinstalado!")

# =============================================================================
# DESENVOLVIMENTO E RELEASE
# =============================================================================

.PHONY: dev-tools
dev-tools: ## Mostrar ferramentas de desenvolvimento dispon√≠veis
	$(call log_info,"Ferramentas de desenvolvimento:")
	@echo "  üìù Changelog: make changelog-create"
	@echo "  üè∑Ô∏è  Release: make release-create VERSION=2.4.0"
	@echo "  üî¢ Version: make version-bump TYPE=minor"
	@echo "  üìä Status: make release-status"

.PHONY: changelog-create
changelog-create: ## Criar nova entrada de changelog
	$(call log_info,"Criando entrada de changelog...")
	@./scripts/dev/changelog-manager.sh create
	$(call log_success,"Entrada de changelog criada!")

.PHONY: release-create
release-create: ## Criar nova release (use VERSION=2.4.0)
	$(call log_info,"Criando release...")
	@if [ -z "$(VERSION)" ]; then \
		echo "Use: make release-create VERSION=2.4.0"; \
		exit 1; \
	fi
	@./scripts/dev/release-manager.sh create-release "$(VERSION)"
	$(call log_success,"Release $(VERSION) criada!")

.PHONY: version-bump
version-bump: ## Incrementar vers√£o (use TYPE=major|minor|patch)
	$(call log_info,"Incrementando vers√£o...")
	@if [ -z "$(TYPE)" ]; then \
		echo "Use: make version-bump TYPE=minor"; \
		exit 1; \
	fi
	@./scripts/dev/release-manager.sh bump-version "$(TYPE)"
	$(call log_success,"Vers√£o incrementada!")

.PHONY: release-status
release-status: ## Verificar status do reposit√≥rio
	$(call log_info,"Verificando status do reposit√≥rio...")
	@./scripts/dev/release-manager.sh check-status

# =============================================================================
# LIMPEZA E MANUTEN√á√ÉO
# =============================================================================

.PHONY: clean
clean: ## Limpar arquivos tempor√°rios e logs
	$(call log_info,"Limpando arquivos tempor√°rios...")
	@find . -name "*.tmp" -delete
	@find . -name "*.bak" -delete
	@find . -name "*.log" -delete
	$(call log_success,"Limpeza conclu√≠da!")

.PHONY: clean-configs
clean-configs: ## Limpar configura√ß√µes e usar templates
	$(call log_info,"Limpando configura√ß√µes...")
	@./scripts/utils/config-setup.sh --force
	$(call log_success,"Configura√ß√µes limpas!")

.PHONY: backup-configs
backup-configs: ## Fazer backup das configura√ß√µes atuais
	$(call log_info,"Fazendo backup das configura√ß√µes...")
	@mkdir -p config/backups
	@cp config/*.sh config/backups/ 2>/dev/null || true
	$(call log_success,"Backup das configura√ß√µes criado!")

# =============================================================================
# INSTALA√á√ÉO E DISTRIBUI√á√ÉO
# =============================================================================

.PHONY: install-local
install-local: ## Instalar localmente para desenvolvimento
	$(call log_info,"Instalando localmente...")
	@./install/install.sh
	$(call log_success,"Instala√ß√£o local conclu√≠da!")

.PHONY: uninstall-local
uninstall-local: ## Desinstalar instala√ß√£o local
	$(call log_info,"Desinstalando localmente...")
	@./install/uninstall.sh
	$(call log_success,"Desinstala√ß√£o local conclu√≠da!")

.PHONY: package
package: ## Criar pacote de distribui√ß√£o local
	$(call log_info,"Criando pacote de distribui√ß√£o...")
	@mkdir -p dist
	@tar -czf "blueai-docker-ops-$(PROJECT_VERSION).tar.gz" \
		--exclude='.git' \
		--exclude='config/*.sh' \
		--exclude='scripts/dev' \
		--exclude='.github' \
		--exclude='*.tmp' \
		--exclude='*.log' \
		.
	$(call log_success,"Pacote criado: blueai-docker-ops-$(PROJECT_VERSION).tar.gz")

# =============================================================================
# VERIFICA√á√ÉO E VALIDA√á√ÉO
# =============================================================================

.PHONY: check
check: validate test ## Validar sintaxe e executar testes
	$(call log_success,"Verifica√ß√£o completa conclu√≠da!")

.PHONY: check-all
check-all: check config-clean ## Verifica√ß√£o completa incluindo configura√ß√µes
	$(call log_success,"Verifica√ß√£o completa com configura√ß√µes limpas!")

.PHONY: status
status: ## Mostrar status completo do projeto
	$(call log_info,"Status do projeto:")
	@echo "  üìã Nome: $(PROJECT_NAME)"
	@echo "  üè∑Ô∏è  Vers√£o: $(PROJECT_VERSION)"
	@echo "  üåø Branch: $(GIT_BRANCH)"
	@echo "  üî¢ Commit: $(GIT_COMMIT)"
	@echo "  üìÅ Diret√≥rio: $(PWD)"
	@echo ""
	@echo "  üìä Status Git:"
	@git status --short 2>/dev/null || echo "    N√£o √© um reposit√≥rio Git"
	@echo ""
	@echo "  ÔøΩÔøΩ Configura√ß√µes:"
	@if [ -f "config/version-config.sh" ]; then \
		echo "    ‚úÖ version-config.sh carregado"; \
		echo "      - Sistema: $(SYSTEM_NAME)"; \
		echo "      - Descri√ß√£o: $(SYSTEM_DESCRIPTION)"; \
		echo "      - Autor: $(SYSTEM_AUTHOR)"; \
		echo "      - Licen√ßa: $(SYSTEM_LICENSE)"; \
		echo "      - Agendamento: $(SCHEDULE_DESCRIPTION)"; \
	else \
		echo "    ‚ùå version-config.sh n√£o encontrado"; \
	fi
	@echo ""
	@echo "  üì¶ Templates:"
	@ls -la config/templates/*.template.sh 2>/dev/null || echo "    Nenhum template encontrado"
	@echo ""
	@echo "  üîç Configura√ß√£o atual:"
	@if [ -f "config/version-config.sh" ]; then \
		echo "    ‚úÖ Configura√ß√£o carregada do arquivo"; \
	else \
		echo "    ‚ö†Ô∏è  Usando valores padr√£o (execute 'make config-clean')"; \
	fi

# =============================================================================
# AJUDA ESPEC√çFICA
# =============================================================================

.PHONY: help-dev
help-dev: ## Ajuda para desenvolvimento
	@echo "üõ†Ô∏è  COMANDOS DE DESENVOLVIMENTO:"
	@echo "  make dev-setup          - Configurar ambiente"
	@echo "  make test               - Executar testes"
	@echo "  make validate           - Validar sintaxe"
	@echo "  make check              - Verifica√ß√£o completa"
	@echo "  make check-all          - Verifica√ß√£o com configura√ß√µes limpas"

.PHONY: help-config
help-config: ## Ajuda para configura√ß√£o
	@echo "üîß COMANDOS DE CONFIGURA√á√ÉO:"
	@echo "  make config-clean       - Limpar configura√ß√µes"
	@echo "  make config-interactive - Configura√ß√£o interativa"
	@echo "  make config-email       - Configurar email"
	@echo "  make config-schedule    - Configurar hor√°rio"
	@echo "  make backup-configs     - Backup das configura√ß√µes"

.PHONY: help-launchagent
help-launchagent: ## Ajuda para LaunchAgent
	@echo "üöÄ COMANDOS DO LAUNCHAGENT:"
	@echo "  make launchagent-install   - Instalar"
	@echo "  make launchagent-status    - Ver status"
	@echo "  make launchagent-schedule  - Configurar hor√°rio"
	@echo "  make launchagent-test      - Testar"
	@echo "  make launchagent-uninstall - Desinstalar"

.PHONY: help-release
help-release: ## Ajuda para releases
	@echo "üè∑Ô∏è  COMANDOS DE RELEASE:"
	@echo "  make release-create     - Criar release"
	@echo "  make version-bump       - Incrementar vers√£o"
	@echo "  make release-status     - Ver status"
	@echo "  make changelog-create   - Criar changelog"

# =============================================================================
# TARGETS ESPECIAIS
# =============================================================================

.PHONY: all
all: dev-setup check config-clean ## Configura√ß√£o completa do projeto
	$(call log_success,"Configura√ß√£o completa conclu√≠da!")

.PHONY: quick-start
quick-start: dev-setup config-interactive launchagent-install ## In√≠cio r√°pido
	$(call log_success,"In√≠cio r√°pido conclu√≠do!")

.PHONY: deploy-prep
deploy-prep: check-all package ## Preparar para deploy
	$(call log_success,"Projeto preparado para deploy!")

# =============================================================================
# INFORMA√á√ïES DO PROJETO
# =============================================================================

.PHONY: info
info: ## Informa√ß√µes do projeto
	@echo "$(PROJECT_NAME)"
	@echo "=================="
	@echo "Vers√£o: $(PROJECT_VERSION)"
	@echo "Branch: $(GIT_BRANCH)"
	@echo "Commit: $(GIT_COMMIT)"
	@echo "Data: $(shell date)"
	@echo ""
	@echo "Documenta√ß√£o: docs/"
	@echo "Scripts: scripts/"
	@echo "Configura√ß√µes: config/"
	@echo "Templates: config/templates/"
	@echo ""
	@echo "Para mais informa√ß√µes: make help"

# =============================================================================
# TARGETS DE EMERG√äNCIA
# =============================================================================

.PHONY: emergency-clean
emergency-clean: ## Limpeza de emerg√™ncia (CUIDADO!)
	$(call log_warning,"LIMPEZA DE EMERG√äNCIA!")
	@read -p "Tem certeza? Digite 'EMERGENCY' para confirmar: " confirm; \
	if [ "$$confirm" = "EMERGENCY" ]; then \
		make clean; \
		make clean-configs; \
		rm -rf logs/* reports/* backups/*; \
		$(call log_success,"Limpeza de emerg√™ncia conclu√≠da!"); \
	else \
		$(call log_info,"Limpeza de emerg√™ncia cancelada"); \
	fi

# =============================================================================
# FIM DO MAKEFILE
# =============================================================================
