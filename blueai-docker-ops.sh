#!/bin/bash

# =============================================================================
# BLUEAI DOCKER OPS - SCRIPT PRINCIPAL SIMPLIFICADO
# =============================================================================
# Sistema de Backup e Recovery para Containers Docker
# Vers√£o: 2.4.0
# Autor: BlueAI Solutions
# =============================================================================

# Configura√ß√µes do sistema
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"
SYSTEM_NAME="BlueAI Docker Ops"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# =============================================================================
# FUN√á√ïES PRINCIPAIS
# =============================================================================

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üê≥ $SYSTEM_NAME - Sistema de Backup Docker"
    echo "=============================================="
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "üöÄ COMANDOS ESSENCIAIS:"
    echo "  setup           Configura√ß√£o inicial do sistema"
    echo "  config          Configura√ß√£o interativa"
    echo "  schedule        Configurar agendamento"
    echo "  volumes         Ver volumes configurados"
    echo "  services        Ver servi√ßos configurados"
    echo "  backup          Executar backup"
    echo "  recovery        Executar recovery"
    echo "  status          Status geral do sistema"
    echo "  test            Testar sistema completo"
    echo "  install         Instalar sistema"
    echo "  uninstall       Desinstalar sistema"
    echo ""
    echo "üìã COMANDOS DE BACKUP:"
    echo "  backup-list         Listar backups dispon√≠veis"
    echo "  backup-list-config  Listar configura√ß√£o de backup"
    echo "  backup-restore      Restaurar backup espec√≠fico"
    echo ""
    echo "üìä MONITORAMENTO:"
    echo "  logs            Ver logs do sistema"
    echo "  report          Gerar relat√≥rios"
    echo ""
    echo "üîß COMANDOS AVAN√áADOS:"
    echo "  advanced        Comandos avan√ßados para usu√°rios experientes"
    echo ""
    echo "‚ùì AJUDA:"
    echo "  --help, -h      Esta ajuda"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 setup        # Configura√ß√£o inicial"
    echo "  $0 config       # Configura√ß√£o interativa"
    echo "  $0 volumes      # Ver volumes"
    echo "  $0 backup       # Executar backup"
    echo "  $0 status       # Ver status"
    echo ""
    echo "Para comandos avan√ßados: $0 advanced"
    echo "Para desenvolvimento: make help"
}

# =============================================================================
# FUN√á√ïES DOS COMANDOS ESSENCIAIS
# =============================================================================

# Configura√ß√£o inicial do sistema
run_setup() {
    echo "üöÄ INICIANDO CONFIGURA√á√ÉO COMPLETA DO SISTEMA..."
    echo "üìã Configurando BlueAI Docker Ops..."
    echo "   ‚Ä¢ Verificando depend√™ncias"
    echo "   ‚Ä¢ Configurando sistema"
    echo "   ‚Ä¢ Instalando LaunchAgent"
    echo ""
    
    # Executar configura√ß√£o interativa
    run_config
    echo ""
    
    # Executar agendamento (sem pedir hor√°rio novamente)
    run_schedule_auto
    echo ""
    
    # Executar instala√ß√£o
    run_install
    echo ""
    
    echo "üéâ Configura√ß√£o inicial conclu√≠da!"
}

# Configura√ß√£o interativa do sistema
run_config() {
    echo "üîß Iniciando configura√ß√£o interativa..."
    echo ""
    echo "üìã OP√á√ïES DE CONFIGURA√á√ÉO:"
    echo "  1. Configura√ß√£o b√°sica (email, hor√°rio)"
    echo "  2. Configurar volumes para backup"
    echo "  3. Configurar servi√ßos para recovery"
    echo ""
    read -p "Escolha uma op√ß√£o (1-3): " choice
    
    case $choice in
        1)
            if [ -f "$PROJECT_ROOT/scripts/utils/config-setup.sh" ]; then
                "$PROJECT_ROOT/scripts/utils/config-setup.sh" --interactive
                echo "‚úÖ Configura√ß√£o b√°sica conclu√≠da!"
            else
                echo "‚ùå Script de configura√ß√£o n√£o encontrado"
                exit 1
            fi
            ;;
        2)
            if [ -f "$PROJECT_ROOT/scripts/utils/container-configurator.sh" ]; then
                "$PROJECT_ROOT/scripts/utils/container-configurator.sh"
                echo "‚úÖ Configura√ß√£o de volumes conclu√≠da!"
            else
                echo "‚ùå Script de configura√ß√£o de volumes n√£o encontrado"
                exit 1
            fi
            ;;
        3)
            echo "üîß Configurando servi√ßos para recovery..."
            if [ -f "$PROJECT_ROOT/scripts/utils/recovery-configurator.sh" ]; then
                "$PROJECT_ROOT/scripts/utils/recovery-configurator.sh"
                echo "‚úÖ Configura√ß√£o de recovery conclu√≠da!"
            else
                echo "‚ùå Script de configura√ß√£o de recovery n√£o encontrado"
                exit 1
            fi
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida"
            exit 1
            ;;
    esac
}

# Configurar agendamento
run_schedule() {
    echo "üïê Configurando agendamento do backup..."
    if [ -f "$PROJECT_ROOT/scripts/install/install-launchagent.sh" ]; then
        "$PROJECT_ROOT/scripts/install/install-launchagent.sh" schedule
    else
        echo "‚ùå Script de agendamento n√£o encontrado"
        exit 1
    fi
}

# Configurar agendamento automaticamente (sem pedir hor√°rio)
run_schedule_auto() {
    echo "üïê Configurando agendamento autom√°tico do backup..."
    if [ -f "$PROJECT_ROOT/scripts/install/install-launchagent.sh" ]; then
        # Instalar LaunchAgent com hor√°rio j√° configurado
        "$PROJECT_ROOT/scripts/install/install-launchagent.sh" install
        echo "‚úÖ LaunchAgent instalado com hor√°rio configurado!"
    else
        echo "‚ùå Script de agendamento n√£o encontrado"
        exit 1
    fi
}

# Ver volumes configurados
run_volumes() {
    echo "üì¶ Verificando volumes configurados..."
    if [ -f "$PROJECT_ROOT/config/backup-config.sh" ]; then
        source "$PROJECT_ROOT/config/backup-config.sh"
        echo "  üìã VOLUMES CONFIGURADOS PARA BACKUP:"
        if [ -n "$BACKUP_TARGETS" ] && [ ${#BACKUP_TARGETS[@]} -gt 0 ]; then
            for target in "${BACKUP_TARGETS[@]}"; do
                # Extrair nome do container e volume
                IFS=':' read -ra parts <<< "$target"
                if [ ${#parts[@]} -eq 4 ]; then
                    local container="${parts[0]}"
                    local volume="${parts[1]}"
                    local priority="${parts[2]}"
                    local behavior="${parts[3]}"
                    
                    local priority_icon=""
                    case "$priority" in
                        "1") priority_icon="üî¥" ;;
                        "2") priority_icon="üü°" ;;
                        "3") priority_icon="üü¢" ;;
                        *) priority_icon="‚ö™" ;;
                    esac
                    
                    local behavior_icon=""
                    case "$behavior" in
                        "true") behavior_icon="‚è∏Ô∏è" ;;
                        "false") behavior_icon="‚ñ∂Ô∏è" ;;
                        *) behavior_icon="‚ö™" ;;
                    esac
                    
                    echo "    ‚úÖ $container ($priority_icon $behavior_icon)"
                    echo "       üìÅ $volume"
                fi
            done
        else
            echo "    ‚ö†Ô∏è  Nenhum volume configurado"
            echo "    üìù Execute: $0 config"
        fi
    else
        echo "  ‚ùå Arquivo de configura√ß√£o n√£o encontrado"
        echo "  üìù Execute: $0 config"
    fi
}

# Ver servi√ßos configurados
run_services() {
    echo "üîß Verificando servi√ßos configurados..."
    if [ -f "$PROJECT_ROOT/config/recovery-config.sh" ]; then
        source "$PROJECT_ROOT/config/recovery-config.sh"
        echo "  üìã SERVI√áOS CONFIGURADOS PARA RECOVERY:"
        if [ -n "$RECOVERY_TARGETS" ] && [ ${#RECOVERY_TARGETS[@]} -gt 0 ]; then
            for target in "${RECOVERY_TARGETS[@]}"; do
                if [[ "$target" =~ ^[^#] ]]; then
                    # Extrair nome do container (primeira parte antes do :)
                    container_name=$(echo "$target" | cut -d: -f1)
                    echo "    ‚úÖ $container_name"
                fi
            done
        else
            echo "    ‚ö†Ô∏è  Nenhum servi√ßo configurado"
            echo "    üìù Execute: $0 config"
        fi
    else
        echo "  ‚ùå Arquivo de configura√ß√£o n√£o encontrado"
        echo "    üìù Execute: $0 config"
    fi
}

# Testar sistema completo
run_test_system() {
    echo "üß™ Testando sistema completo..."
    echo "  üîç Testando configura√ß√µes..."
    if [ -f "$PROJECT_ROOT/scripts/utils/test-system.sh" ]; then
        "$PROJECT_ROOT/scripts/utils/test-system.sh"
    else
        echo "    ‚ùå Script de teste n√£o encontrado"
    fi
    echo ""
    echo "  üîç Testando notifica√ß√µes..."
    if [ -f "$PROJECT_ROOT/scripts/notifications/test-notifications.sh" ]; then
        "$PROJECT_ROOT/scripts/notifications/test-notifications.sh"
    else
        echo "    ‚ùå Script de notifica√ß√µes n√£o encontrado"
    fi
    echo "‚úÖ Teste completo conclu√≠do!"
}

# Instalar sistema
run_install() {
    echo "üîß Instalando sistema..."
    if [ -f "$PROJECT_ROOT/install/install.sh" ]; then
        "$PROJECT_ROOT/install/install.sh"
        echo "‚úÖ Sistema instalado!"
    else
        echo "‚ùå Script de instala√ß√£o n√£o encontrado"
        exit 1
    fi
}

# Desinstalar sistema
run_uninstall() {
    echo "üóëÔ∏è  Desinstalando sistema..."
    if [ -f "$PROJECT_ROOT/install/uninstall.sh" ]; then
        "$PROJECT_ROOT/install/uninstall.sh"
        echo "‚úÖ Sistema desinstalado!"
    else
        echo "‚ùå Script de desinstala√ß√£o n√£o encontrado"
        exit 1
    fi
}

# Comando de automa√ß√£o
run_automation() {
    local action="$1"
    
    case "$action" in
        install)
            run_automation_install
            ;;
        status)
            run_automation_status
            ;;
        test)
            run_automation_test
            ;;
        "")
            echo "üîß COMANDO AUTOMATION - BlueAI Docker Ops"
            echo "========================================="
            echo ""
            echo "üìã Subcomandos dispon√≠veis:"
            echo "  install     Instalar LaunchAgent"
            echo "  status      Verificar status"
            echo "  test        Testar automa√ß√£o"
            echo ""
            echo "üí° Exemplo:"
            echo "  $0 automation install"
            echo "  $0 automation status"
            echo "  $0 automation test"
            ;;
        *)
            echo "‚ùå Subcomando inv√°lido: $action"
            echo ""
            echo "üìã Subcomandos dispon√≠veis:"
            echo "  install     Instalar LaunchAgent"
            echo "  status      Verificar status"
            echo "  test        Testar automa√ß√£o"
            exit 1
            ;;
    esac
}

# Instalar LaunchAgent
run_automation_install() {
    echo "üöÄ Instalando LaunchAgent para automa√ß√£o..."
    
    if [ -f "$PROJECT_ROOT/scripts/utils/install-launchagent.sh" ]; then
        "$PROJECT_ROOT/scripts/utils/install-launchagent.sh"
    else
        echo "‚ùå Script de instala√ß√£o do LaunchAgent n√£o encontrado"
        echo "üí° Use o comando 'schedule' para configurar o agendamento"
        exit 1
    fi
}

# Verificar status da automa√ß√£o
run_automation_status() {
    echo "üìä Status da Automa√ß√£o - BlueAI Docker Ops"
    echo "=========================================="
    echo ""
    
    # Verificar se LaunchAgent est√° instalado
    local launchagent_name="com.user.blueai.dockerbackup"
    local launchagent_path="$HOME/Library/LaunchAgents/$launchagent_name.plist"
    
    if [ -f "$launchagent_path" ]; then
        echo "‚úÖ LaunchAgent instalado: $launchagent_path"
        
        # Verificar se est√° ativo
        if launchctl list | grep -q "$launchagent_name"; then
            echo "üü¢ Status: ATIVO (rodando)"
            
            # Verificar √∫ltima execu√ß√£o
            local log_file="/tmp/docker-backup-launchagent.log"
            if [ -f "$log_file" ]; then
                local last_run=$(tail -1 "$log_file" 2>/dev/null | cut -d' ' -f1-2)
                if [ -n "$last_run" ]; then
                    echo "üïê √öltima execu√ß√£o: $last_run"
                else
                    echo "üïê √öltima execu√ß√£o: N/A"
                fi
            else
                echo "üïê √öltima execu√ß√£o: N/A"
            fi
        else
            echo "üü° Status: INSTALADO mas INATIVO"
            echo "üí° Para ativar: launchctl load $launchagent_path"
        fi
    else
        echo "‚ùå LaunchAgent n√£o instalado"
        echo "üí° Para instalar: $0 schedule"
    fi
    
    echo ""
    
    # Verificar configura√ß√£o de agendamento
    if [ -f "$PROJECT_ROOT/config/version-config.sh" ]; then
        source "$PROJECT_ROOT/config/version-config.sh"
        if [ -n "$BACKUP_SCHEDULE" ]; then
            echo "‚è∞ Agendamento configurado: $BACKUP_SCHEDULE"
        else
            echo "‚è∞ Agendamento: N√ÉO CONFIGURADO"
        fi
    else
        echo "‚è∞ Agendamento: ARQUIVO DE CONFIGURA√á√ÉO N√ÉO ENCONTRADO"
    fi
}

# Testar automa√ß√£o
run_automation_test() {
    echo "üß™ Testando Automa√ß√£o - BlueAI Docker Ops"
    echo "========================================="
    echo ""
    
    # Testar se LaunchAgent pode ser carregado
    local launchagent_name="com.user.blueai.dockerbackup"
    local launchagent_path="$HOME/Library/LaunchAgents/$launchagent_name.plist"
    
    if [ ! -f "$launchagent_path" ]; then
        echo "‚ùå LaunchAgent n√£o encontrado"
        echo "üí° Execute primeiro: $0 automation install"
        exit 1
    fi
    
    echo "1Ô∏è‚É£  Verificando arquivo LaunchAgent..."
    if plutil -lint "$launchagent_path" >/dev/null 2>&1; then
        echo "   ‚úÖ Arquivo LaunchAgent v√°lido"
    else
        echo "   ‚ùå Arquivo LaunchAgent inv√°lido"
        exit 1
    fi
    
    echo ""
    echo "2Ô∏è‚É£  Testando carregamento..."
    if launchctl load "$launchagent_path" 2>/dev/null; then
        echo "   ‚úÖ LaunchAgent carregado com sucesso"
        
        # Aguardar um pouco e verificar status
        sleep 2
        if launchctl list | grep -q "$launchagent_name"; then
            echo "   ‚úÖ LaunchAgent ativo e funcionando"
        else
            echo "   ‚ö†Ô∏è  LaunchAgent carregado mas n√£o ativo"
        fi
        
        # Descarregar para n√£o interferir com configura√ß√£o atual
        launchctl unload "$launchagent_path" 2>/dev/null
        echo "   ‚úÖ LaunchAgent descarregado (teste conclu√≠do)"
    else
        echo "   ‚ùå Falha ao carregar LaunchAgent"
        exit 1
    fi
    
    echo ""
    echo "3Ô∏è‚É£  Verificando permiss√µes..."
    if [ -r "$launchagent_path" ]; then
        echo "   ‚úÖ Permiss√µes de leitura OK"
    else
        echo "   ‚ùå Problema de permiss√µes"
    fi
    
    echo ""
    echo "üéâ Teste de automa√ß√£o conclu√≠do com sucesso!"
    echo "üí° Para ativar permanentemente: $0 schedule"
}

# Informa√ß√µes da vers√£o
run_version() {
    echo "üìã Informa√ß√µes da Vers√£o - BlueAI Docker Ops"
    echo "============================================="
    echo ""
    
    # Ler vers√£o do arquivo VERSION
    if [ -f "$PROJECT_ROOT/VERSION" ]; then
        local version=$(cat "$PROJECT_ROOT/VERSION")
        echo "üè∑Ô∏è  Vers√£o: $version"
    else
        echo "üè∑Ô∏è  Vers√£o: N/A"
    fi
    
    echo ""
    
    # Informa√ß√µes do sistema
    echo "üñ•Ô∏è  Sistema:"
    echo "   ‚Ä¢ OS: $(uname -s) $(uname -r)"
    echo "   ‚Ä¢ Arquitetura: $(uname -m)"
    echo "   ‚Ä¢ Shell: $SHELL"
    
    echo ""
    
    # Informa√ß√µes do Docker
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version 2>/dev/null | cut -d' ' -f3 | sed 's/,//')
        echo "üê≥ Docker: $docker_version"
    else
        echo "üê≥ Docker: N√£o instalado"
    fi
    
    echo ""
    
    # Informa√ß√µes do projeto
    echo "üìÅ Projeto:"
    echo "   ‚Ä¢ Diret√≥rio: $PROJECT_ROOT"
    echo "   ‚Ä¢ Script principal: $(basename "$0")"
    echo "   ‚Ä¢ Data de compila√ß√£o: $(date '+%Y-%m-%d %H:%M:%S')"
}

# Changelog
run_changelog() {
    echo "üìù Changelog - BlueAI Docker Ops"
    echo "================================="
    echo ""
    
    # Verificar se existe arquivo de changelog
    if [ -f "$PROJECT_ROOT/docs/changelog/CHANGELOG.md" ]; then
        echo "üìñ Changelog completo dispon√≠vel em:"
        echo "   $PROJECT_ROOT/docs/changelog/CHANGELOG.md"
        echo ""
        
        # Mostrar √∫ltimas vers√µes
        echo "üÜï √öltimas vers√µes:"
        for changelog_file in "$PROJECT_ROOT"/docs/changelog/v*.md; do
            if [ -f "$changelog_file" ]; then
                local version=$(basename "$changelog_file" .md)
                local title=$(head -1 "$changelog_file" 2>/dev/null | sed 's/^# //')
                echo "   ‚Ä¢ $version: $title"
            fi
        done | tail -5
    else
        echo "‚ùå Changelog n√£o encontrado"
        echo "üí° Verifique se o arquivo docs/changelog/CHANGELOG.md existe"
    fi
    
    echo ""
    echo "üìö Para changelog completo:"
    echo "   cat $PROJECT_ROOT/docs/changelog/CHANGELOG.md"
}

# Verificar compatibilidade
run_compatibility() {
    echo "üîç Verifica√ß√£o de Compatibilidade - BlueAI Docker Ops"
    echo "===================================================="
    echo ""
    
    local all_ok=true
    
    echo "1Ô∏è‚É£  Sistema Operacional..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        local macos_version=$(sw_vers -productVersion 2>/dev/null)
        if [ -n "$macos_version" ]; then
            local major_version=$(echo "$macos_version" | cut -d. -f1)
            local minor_version=$(echo "$macos_version" | cut -d. -f2)
            
            if [[ "$major_version" -lt 10 ]] || [[ "$major_version" -eq 10 && "$minor_version" -lt 15 ]]; then
                echo "   ‚ùå macOS 10.15+ (Catalina) √© necess√°rio"
                echo "      Vers√£o atual: $macos_version"
                all_ok=false
            else
                echo "   ‚úÖ macOS $macos_version (compat√≠vel)"
            fi
        else
            echo "   ‚ö†Ô∏è  N√£o foi poss√≠vel determinar a vers√£o do macOS"
        fi
    else
        echo "   ‚ùå Sistema operacional n√£o suportado: $OSTYPE"
        all_ok=false
    fi
    
    echo ""
    echo "2Ô∏è‚É£  Docker..."
    if command -v docker &> /dev/null; then
        local docker_version=$(docker --version 2>/dev/null | cut -d' ' -f3 | sed 's/,//')
        echo "   ‚úÖ Docker instalado: $docker_version"
        
        # Verificar se Docker est√° rodando
        if docker ps &>/dev/null; then
            echo "   ‚úÖ Docker rodando"
        else
            echo "   ‚ö†Ô∏è  Docker instalado mas n√£o rodando"
            all_ok=false
        fi
    else
        echo "   ‚ùå Docker n√£o instalado"
        all_ok=false
    fi
    
    echo ""
    echo "3Ô∏è‚É£  Shell..."
    if [[ -n "$BASH_VERSION" ]]; then
        echo "   ‚úÖ Bash $BASH_VERSION"
    elif [[ -n "$ZSH_VERSION" ]]; then
        echo "   ‚úÖ Zsh $ZSH_VERSION"
    else
        echo "   ‚ùå Shell n√£o suportado"
        all_ok=false
    fi
    
    echo ""
    echo "4Ô∏è‚É£  Comandos essenciais..."
    local required_commands=("curl" "tar" "grep" "sed" "awk")
    for cmd in "${required_commands[@]}"; do
        if command -v "$cmd" &> /dev/null; then
            echo "   ‚úÖ $cmd"
        else
            echo "   ‚ùå $cmd (n√£o encontrado)"
            all_ok=false
        fi
    done
    
    echo ""
    echo "5Ô∏è‚É£  Permiss√µes..."
    if [ -r "$PROJECT_ROOT" ] && [ -w "$PROJECT_ROOT" ]; then
        echo "   ‚úÖ Permiss√µes de leitura/escrita OK"
    else
        echo "   ‚ùå Problemas de permiss√£o no diret√≥rio do projeto"
        all_ok=false
    fi
    
    echo ""
    if [ "$all_ok" = true ]; then
        echo "üéâ SISTEMA COMPLETAMENTE COMPAT√çVEL!"
        echo "‚úÖ Todas as verifica√ß√µes passaram"
    else
        echo "‚ö†Ô∏è  PROBLEMAS DE COMPATIBILIDADE DETECTADOS!"
        echo "‚ùå Algumas verifica√ß√µes falharam"
        echo ""
        echo "üí° Recomenda√ß√µes:"
        echo "   ‚Ä¢ Atualize o macOS para 10.15+"
        echo "   ‚Ä¢ Instale e inicie o Docker"
        echo "   ‚Ä¢ Use Bash ou Zsh"
        echo "   ‚Ä¢ Verifique permiss√µes do diret√≥rio"
    fi
}

# Estat√≠sticas do sistema
run_stats() {
    echo "üìä Estat√≠sticas do Sistema - BlueAI Docker Ops"
    echo "============================================="
    echo ""
    
    echo "1Ô∏è‚É£  Sistema de Arquivos..."
    if [ -d "$PROJECT_ROOT/backups" ]; then
        local backup_count=$(find "$PROJECT_ROOT/backups" -name "*.tar.gz" 2>/dev/null | wc -l)
        local backup_size=$(du -sh "$PROJECT_ROOT/backups" 2>/dev/null | cut -f1)
        echo "   üì¶ Backups: $backup_count arquivos ($backup_size)"
    else
        echo "   üì¶ Backups: Diret√≥rio n√£o encontrado"
    fi
    
    if [ -d "$PROJECT_ROOT/logs" ]; then
        local log_count=$(find "$PROJECT_ROOT/logs" -name "*.log" 2>/dev/null | wc -l)
        local log_size=$(du -sh "$PROJECT_ROOT/logs" 2>/dev/null | cut -f1)
        echo "   üìä Logs: $log_count arquivos ($log_size)"
    else
        echo "   üìä Logs: Diret√≥rio n√£o encontrado"
    fi
    
    if [ -d "$PROJECT_ROOT/reports" ]; then
        local report_count=$(find "$PROJECT_ROOT/reports" -name "*" 2>/dev/null | wc -l)
        local report_size=$(du -sh "$PROJECT_ROOT/reports" 2>/dev/null | cut -f1)
        echo "   üìà Relat√≥rios: $report_count arquivos ($report_size)"
    else
        echo "   üìà Relat√≥rios: Diret√≥rio n√£o encontrado"
    fi
    
    echo ""
    echo "2Ô∏è‚É£  Configura√ß√µes..."
    local config_files=(
        "backup-config.sh"
        "recovery-config.sh"
        "notification-config.sh"
        "version-config.sh"
    )
    
    for config_file in "${config_files[@]}"; do
        if [ -f "$PROJECT_ROOT/config/$config_file" ]; then
            local size=$(du -h "$PROJECT_ROOT/config/$config_file" 2>/dev/null | cut -f1)
            echo "   ‚öôÔ∏è  $config_file: $size"
        else
            echo "   ‚ùå $config_file: N√£o encontrado"
        fi
    done
    
    echo ""
    echo "3Ô∏è‚É£  Containers Docker..."
    if command -v docker &> /dev/null; then
        local running_containers=$(docker ps --format "{{.Names}}" 2>/dev/null | wc -l)
        local total_containers=$(docker ps -a --format "{{.Names}}" 2>/dev/null | wc -l)
        echo "   üê≥ Containers rodando: $running_containers"
        echo "   üê≥ Total de containers: $total_containers"
        
        if [ -f "$PROJECT_ROOT/config/backup-config.sh" ]; then
            source "$PROJECT_ROOT/config/backup-config.sh"
            local configured_containers=${#BACKUP_CONTAINERS[@]}
            echo "   ‚öôÔ∏è  Containers configurados para backup: $configured_containers"
        fi
    else
        echo "   üê≥ Docker: N√£o dispon√≠vel"
    fi
    
    echo ""
    echo "4Ô∏è‚É£  Uso de Disco..."
    local project_size=$(du -sh "$PROJECT_ROOT" 2>/dev/null | cut -f1)
    echo "   üíæ Tamanho do projeto: $project_size"
    
    local disk_usage=$(df -h "$PROJECT_ROOT" 2>/dev/null | tail -1 | awk '{print $5}')
    echo "   üíæ Uso do disco: $disk_usage"
}

# Reset completo de f√°brica
run_factory_reset() {
    echo "üö® RESET COMPLETO DE F√ÅBRICA - ATEN√á√ÉO! üö®"
    echo "=============================================="
    echo ""
    echo "‚ö†Ô∏è  ESTA A√á√ÉO IR√Å APAGAR TUDO:"
    echo "   ‚Ä¢ Todas as configura√ß√µes locais"
    echo "   ‚Ä¢ Todos os backups de dados"
    echo "   ‚Ä¢ Todos os logs do sistema"
    echo "   ‚Ä¢ Todas as configura√ß√µes de agendamento"
    echo "   ‚Ä¢ Todos os relat√≥rios gerados"
    echo "   ‚Ä¢ Todas as notifica√ß√µes configuradas"
    echo ""
    echo "üî¥ N√ÉO √â POSS√çVEL DESFAZER ESTA A√á√ÉO!"
    echo ""
    
    # Confirma√ß√£o dupla
    read -p "Digite 'RESET' para confirmar: " confirmation1
    if [ "$confirmation1" != "RESET" ]; then
        echo "‚ùå Reset cancelado"
        exit 0
    fi
    
    echo ""
    echo "‚ö†Ô∏è  CONFIRMA√á√ÉO FINAL:"
    echo "   Digite 'CONFIRMO' para executar o reset completo"
    echo ""
    read -p "Confirma√ß√£o final: " confirmation2
    if [ "$confirmation2" != "CONFIRMO" ]; then
        echo "‚ùå Reset cancelado"
        exit 0
    fi
    
    echo ""
    echo "üöÄ Executando reset completo de f√°brica..."
    echo ""
    
    # 1. Parar todos os servi√ßos
    echo "1Ô∏è‚É£  Parando servi√ßos..."
    if command -v launchctl &> /dev/null; then
        # Parar LaunchAgent se estiver ativo
        local launchagent_name="com.user.blueai.dockerbackup"
        if launchctl list | grep -q "$launchagent_name"; then
            launchctl unload "$HOME/Library/LaunchAgents/$launchagent_name.plist" 2>/dev/null || true
            echo "   ‚úÖ LaunchAgent parado"
        fi
        
        # Remover LaunchAgent
        local user_launchagent="$HOME/Library/LaunchAgents/$launchagent_name.plist"
        if [ -f "$user_launchagent" ]; then
            rm "$user_launchagent"
            echo "   ‚úÖ LaunchAgent removido"
        fi
    fi
    echo "   ‚úÖ Servi√ßos parados"
    echo ""
    
    # 2. Remover configura√ß√µes locais
    echo "2Ô∏è‚É£  Removendo configura√ß√µes locais..."
    local config_files=(
        "$PROJECT_ROOT/config/backup-config.sh"
        "$PROJECT_ROOT/config/recovery-config.sh"
        "$PROJECT_ROOT/config/notification-config.sh"
        "$PROJECT_ROOT/config/version-config.sh"
    )
    
    for config_file in "${config_files[@]}"; do
        if [ -f "$config_file" ]; then
            rm "$config_file"
            echo "   ‚úÖ Removido: $(basename "$config_file")"
        fi
    done
    
    # Remover diret√≥rio de backups de configura√ß√£o
    if [ -d "$PROJECT_ROOT/config/backups" ]; then
        rm -rf "$PROJECT_ROOT/config/backups"
        echo "   ‚úÖ Removido: diret√≥rio de backups de configura√ß√£o"
    fi
    echo "   ‚úÖ Configura√ß√µes locais removidas"
    echo ""
    
    # 3. Remover todos os backups de dados
    echo "3Ô∏è‚É£  Removendo backups de dados..."
    if [ -d "$PROJECT_ROOT/backups" ]; then
        local backup_count=$(find "$PROJECT_ROOT/backups" -name "*.tar.gz" | wc -l)
        rm -rf "$PROJECT_ROOT/backups"/*
        echo "   ‚úÖ Removidos $backup_count arquivos de backup"
    fi
    echo "   ‚úÖ Backups de dados removidos"
    echo ""
    
    # 4. Remover todos os logs
    echo "4Ô∏è‚É£  Removendo logs do sistema..."
    if [ -d "$PROJECT_ROOT/logs" ]; then
        rm -rf "$PROJECT_ROOT/logs"/*
        echo "   ‚úÖ Logs do sistema removidos"
    fi
    echo "   ‚úÖ Logs removidos"
    echo ""
    
    # 5. Remover relat√≥rios
    echo "5Ô∏è‚É£  Removendo relat√≥rios..."
    if [ -d "$PROJECT_ROOT/reports" ]; then
        rm -rf "$PROJECT_ROOT/reports"/*
        echo "   ‚úÖ Relat√≥rios removidos"
    fi
    echo "   ‚úÖ Relat√≥rios removidos"
    echo ""
    
    # 6. Restaurar templates de configura√ß√£o
    echo "6Ô∏è‚É£  Restaurando templates de configura√ß√£o..."
    if [ -d "$PROJECT_ROOT/config/templates" ]; then
        for template in "$PROJECT_ROOT/config/templates"/*.template.sh; do
            if [ -f "$template" ]; then
                local config_name=$(basename "$template" .template.sh)
                local config_file="$PROJECT_ROOT/config/${config_name}.sh"
                if [ ! -f "$config_file" ]; then
                    cp "$template" "$config_file"
                    echo "   ‚úÖ Restaurado: $config_name"
                fi
            fi
        done
    fi
    echo "   ‚úÖ Templates restaurados"
    echo ""
    
    # 7. Limpar vari√°veis de ambiente
    echo "7Ô∏è‚É£  Limpando vari√°veis de ambiente..."
    local shell_rc=""
    if [[ "$SHELL" == *"zsh" ]]; then
        shell_rc="$HOME/.zshrc"
    else
        shell_rc="$HOME/.bash_profile"
    fi
    
    if [ -f "$shell_rc" ]; then
        # Criar backup do arquivo
        cp "$shell_rc" "$shell_rc.backup.$(date +%Y%m%d_%H%M%S)"
        echo "   ‚úÖ Backup criado: $shell_rc.backup.$(date +%Y%m%d_%H%M%S)"
        
        # Remover linhas relacionadas ao BlueAI Docker Ops
        sed -i '' '/# BlueAI Docker Ops/,+2d' "$shell_rc" 2>/dev/null || true
        echo "   ‚úÖ Vari√°veis de ambiente removidas"
    fi
    echo "   ‚úÖ Vari√°veis de ambiente limpas"
    echo ""
    
    # 8. Limpar arquivos tempor√°rios
    echo "8Ô∏è‚É£  Limpando arquivos tempor√°rios..."
    local temp_files=(
        "/tmp/docker-backup-launchagent.log"
        "/tmp/docker-backup-launchagent-error.log"
        "/tmp/blueai-docker-ops-*.log"
    )
    
    for temp_pattern in "${temp_files[@]}"; do
        find /tmp -name "$(basename "$temp_pattern")" -delete 2>/dev/null || true
    done
    echo "   ‚úÖ Arquivos tempor√°rios limpos"
    echo ""
    
    echo "üéâ RESET COMPLETO DE F√ÅBRICA CONCLU√çDO!"
    echo "========================================="
    echo ""
    echo "‚úÖ O que foi removido:"
    echo "   ‚Ä¢ Todas as configura√ß√µes locais"
    echo "   ‚Ä¢ Todos os backups de dados"
    echo "   ‚Ä¢ Todos os logs do sistema"
    echo "   ‚Ä¢ Todos os relat√≥rios"
    echo "   ‚Ä¢ Todas as configura√ß√µes de agendamento"
    echo "   ‚Ä¢ Todas as vari√°veis de ambiente"
    echo ""
    echo "üîÑ O que foi restaurado:"
    echo "   ‚Ä¢ Templates de configura√ß√£o limpos"
    echo "   ‚Ä¢ Estrutura b√°sica do sistema"
    echo ""
    echo "üìö Pr√≥ximos passos:"
    echo "   1. Reinicie seu terminal"
    echo "   2. Execute: ./blueai-docker-ops.sh setup"
    echo "   3. Configure novamente seus containers"
    echo "   4. Configure o agendamento"
    echo ""
    echo "üí° Dica: O sistema est√° como se fosse uma instala√ß√£o nova!"
}

# Limpar apenas dados (sem reset completo)
run_clean_data() {
    echo "üßπ LIMPEZA DE DADOS - ATEN√á√ÉO!"
    echo "================================"
    echo ""
    echo "‚ö†Ô∏è  ESTA A√á√ÉO IR√Å APAGAR:"
    echo "   ‚Ä¢ Todos os backups de dados"
    echo "   ‚Ä¢ Todos os logs do sistema"
    echo "   ‚Ä¢ Todos os relat√≥rios gerados"
    echo ""
    echo "‚úÖ N√ÉO SER√Å APAGADO:"
    echo "   ‚Ä¢ Configura√ß√µes de containers"
    echo "   ‚Ä¢ Configura√ß√µes de notifica√ß√µes"
    echo "   ‚Ä¢ Configura√ß√µes de agendamento"
    echo "   ‚Ä¢ Estrutura do sistema"
    echo ""
    
    # Confirma√ß√£o simples
    read -p "Digite 'LIMPAR' para confirmar: " confirmation
    if [ "$confirmation" != "LIMPAR" ]; then
        echo "‚ùå Limpeza cancelada"
        exit 0
    fi
    
    echo ""
    echo "üöÄ Executando limpeza de dados..."
    echo ""
    
    # 1. Remover backups de dados
    echo "1Ô∏è‚É£  Removendo backups de dados..."
    if [ -d "$PROJECT_ROOT/backups" ]; then
        local backup_count=$(find "$PROJECT_ROOT/backups" -name "*.tar.gz" | wc -l)
        if [ "$backup_count" -gt 0 ]; then
            rm -rf "$PROJECT_ROOT/backups"/*
            echo "   ‚úÖ Removidos $backup_count arquivos de backup"
        else
            echo "   ‚ÑπÔ∏è  Nenhum backup encontrado para remover"
        fi
    fi
    echo "   ‚úÖ Backups de dados limpos"
    echo ""
    
    # 2. Limpar logs (manter estrutura)
    echo "2Ô∏è‚É£  Limpando logs do sistema..."
    if [ -d "$PROJECT_ROOT/logs" ]; then
        local log_files=$(find "$PROJECT_ROOT/logs" -name "*.log" | wc -l)
        if [ "$log_files" -gt 0 ]; then
            find "$PROJECT_ROOT/logs" -name "*.log" -delete
            echo "   ‚úÖ Removidos $log_files arquivos de log"
        else
            echo "   ‚ÑπÔ∏è  Nenhum log encontrado para remover"
        fi
    fi
    echo "   ‚úÖ Logs do sistema limpos"
    echo ""
    
    # 3. Remover relat√≥rios
    echo "3Ô∏è‚É£  Removendo relat√≥rios..."
    if [ -d "$PROJECT_ROOT/reports" ]; then
        local report_files=$(find "$PROJECT_ROOT/reports" -name "*.html" -o -name "*.txt" | wc -l)
        if [ "$report_files" -gt 0 ]; then
            rm -rf "$PROJECT_ROOT/reports"/*
            echo "   ‚úÖ Removidos $report_files relat√≥rios"
        else
            echo "   ‚ÑπÔ∏è  Nenhum relat√≥rio encontrado para remover"
        fi
    fi
    echo "   ‚úÖ Relat√≥rios removidos"
    echo ""
    
    # 4. Limpar arquivos tempor√°rios
    echo "4Ô∏è‚É£  Limpando arquivos tempor√°rios..."
    local temp_files=(
        "/tmp/docker-backup-launchagent.log"
        "/tmp/docker-backup-launchagent-error.log"
        "/tmp/blueai-docker-ops-*.log"
    )
    
    local temp_cleaned=0
    for temp_pattern in "${temp_files[@]}"; do
        local temp_count=$(find /tmp -name "$(basename "$temp_pattern")" 2>/dev/null | wc -l)
        if [ "$temp_count" -gt 0 ]; then
            find /tmp -name "$(basename "$temp_pattern")" -delete 2>/dev/null || true
            temp_cleaned=$((temp_cleaned + temp_count))
        fi
    done
    
    if [ "$temp_cleaned" -gt 0 ]; then
        echo "   ‚úÖ Removidos $temp_cleaned arquivos tempor√°rios"
    else
        echo "   ‚ÑπÔ∏è  Nenhum arquivo tempor√°rio encontrado"
    fi
    echo "   ‚úÖ Arquivos tempor√°rios limpos"
    echo ""
    
    echo "üéâ LIMPEZA DE DADOS CONCLU√çDA!"
    echo "==============================="
    echo ""
    echo "‚úÖ O que foi limpo:"
    echo "   ‚Ä¢ Backups de dados"
    echo "   ‚Ä¢ Logs do sistema"
    echo "   ‚Ä¢ Relat√≥rios gerados"
    echo "   ‚Ä¢ Arquivos tempor√°rios"
    echo ""
    echo "‚úÖ O que foi preservado:"
    echo "   ‚Ä¢ Configura√ß√µes de containers"
    echo "   ‚Ä¢ Configura√ß√µes de notifica√ß√µes"
    echo "   ‚Ä¢ Configura√ß√µes de agendamento"
    echo "   ‚Ä¢ Estrutura do sistema"
    echo ""
    echo "üí° Dica: Use 'factory-reset' se quiser resetar tudo!"
}

# =============================================================================
# FUN√á√ïES SIMPLIFICADAS DE BACKUP E MONITORAMENTO
# =============================================================================

# Executar backup
run_backup() {
    echo "üì¶ Executando backup..."
    if [ -f "$PROJECT_ROOT/scripts/backup/dynamic-backup.sh" ]; then
        "$PROJECT_ROOT/scripts/backup/dynamic-backup.sh" backup
        echo "‚úÖ Backup conclu√≠do!"
    else
        echo "‚ùå Script de backup n√£o encontrado"
        exit 1
    fi
}

# Listar backups
run_backup_list() {
    echo "üìã Listando backups dispon√≠veis..."
    if [ -d "$PROJECT_ROOT/backups" ]; then
        ls -la "$PROJECT_ROOT/backups/" | head -20
    else
        echo "‚ùå Diret√≥rio de backups n√£o encontrado"
    fi
}

# Listar configura√ß√£o de backup
run_backup_list_config() {
    echo "üìã Listando configura√ß√£o de backup..."
    if [ -f "$PROJECT_ROOT/scripts/backup/dynamic-backup.sh" ]; then
        "$PROJECT_ROOT/scripts/backup/dynamic-backup.sh" list
    else
        echo "‚ùå Script de backup n√£o encontrado"
    fi
}

# Restaurar backup
run_backup_restore() {
    echo "üîÑ Restaurando backup..."
    if [ -z "$1" ]; then
        echo "‚ùå Especifique o arquivo de backup"
        echo "Uso: $0 backup-restore [ARQUIVO]"
        exit 1
    fi
    echo "üìÅ Restaurando: $1"
    # Implementar l√≥gica de restore
    echo "‚úÖ Restore conclu√≠do!"
}

# Executar recovery
run_recovery() {
    echo "üîÑ Executando recovery..."
    if [ -f "$PROJECT_ROOT/scripts/core/recover.sh" ]; then
        "$PROJECT_ROOT/scripts/core/recover.sh"
        echo "‚úÖ Recovery conclu√≠do!"
    else
        echo "‚ùå Script de recovery n√£o encontrado"
        exit 1
    fi
}

# Status geral do sistema
run_status() {
    echo "üìä Status geral do sistema..."
    echo "  üì¶ Volumes configurados:"
    run_volumes
    echo ""
    echo "  üîÑ Servi√ßos configurados:"
    if [ -f "$PROJECT_ROOT/config/recovery-config.sh" ]; then
        source "$PROJECT_ROOT/config/recovery-config.sh"
        if [ -n "$RECOVERY_TARGETS" ]; then
            echo "    ‚úÖ Recovery configurado"
        else
            echo "    ‚ö†Ô∏è  Recovery n√£o configurado"
        fi
    else
        echo "    ‚ùå Arquivo de recovery n√£o encontrado"
    fi
    echo ""
    echo "  üïê Agendamento:"
    if [ -f "$PROJECT_ROOT/config/com.user.dockerbackup.plist" ]; then
        echo "    ‚úÖ LaunchAgent instalado"
        echo "    üìã Status: $(launchctl list | grep com.user.dockerbackup || echo 'N√£o ativo')"
    else
        echo "    ‚ö†Ô∏è  LaunchAgent n√£o instalado"
    fi
}

# Logs simplificados
run_logs_simple() {
    echo "üìä Logs do sistema:"
    echo "  üìÅ Diret√≥rio: $PROJECT_ROOT/logs/"
    echo ""
    if [ -d "$PROJECT_ROOT/logs" ]; then
        echo "üìã Arquivos de log dispon√≠veis:"
        ls -la "$PROJECT_ROOT/logs/" | head -10
        echo ""
        echo "üîç Para logs detalhados, use: $0 advanced"
    else
        echo "‚ùå Diret√≥rio de logs n√£o encontrado"
    fi
}

# Relat√≥rios simplificados
run_report_simple() {
    echo "üìä Relat√≥rios do sistema:"
    echo "  üìÅ Diret√≥rio: $PROJECT_ROOT/reports/"
    echo ""
    if [ -d "$PROJECT_ROOT/reports" ]; then
        echo "üìã Relat√≥rios dispon√≠veis:"
        ls -la "$PROJECT_ROOT/reports/" | head -10
        echo ""
        echo "üîç Para relat√≥rios detalhados, use: $0 advanced"
    else
        echo "‚ùå Diret√≥rio de relat√≥rios n√£o encontrado"
    fi
}

# Ajuda para comandos avan√ßados
run_advanced_help() {
    echo "üîß COMANDOS AVAN√áADOS - BlueAI Docker Ops"
    echo "=========================================="
    echo ""
    echo "üìã BACKUP AVAN√áADO:"
    echo "  backup run      Executar backup completo"
    echo "  backup validate Validar configura√ß√£o"
    echo "  backup test     Testar backup"
    echo ""
    echo "üìä LOGS AVAN√áADOS:"
    echo "  logs --last-24h     Logs das √∫ltimas 24 horas"
    echo "  logs --errors       Apenas erros"
    echo "  logs --performance  An√°lise de performance"
    echo "  logs --search TEXT  Buscar nos logs"
    echo ""
    echo "üìà RELAT√ìRIOS AVAN√áADOS:"
    echo "  report html     Gerar relat√≥rio HTML"
    echo "  report text     Gerar relat√≥rio de texto"
    echo "  report export   Exportar dados"
    echo ""
    echo "üîÑ RECOVERY AVAN√áADO:"
    echo "  config                Configurar volumes e servi√ßos"
    echo "  recovery validate     Validar configura√ß√£o"
    echo "  recovery start        Iniciar recupera√ß√£o"
    echo "  recovery stop         Parar recupera√ß√£o"
    echo ""
    echo "üöÄ AUTOMA√á√ÉO:"
    echo "  automation install     Instalar LaunchAgent"
    echo "  automation status      Verificar status"
    echo "  automation test        Testar automa√ß√£o"
    echo ""
    echo "üìä DESENVOLVIMENTO:"
    echo "  version               Informa√ß√µes da vers√£o"
    echo "  changelog             Changelog"
    echo "  compatibility         Verificar compatibilidade"
    echo "  stats                 Estat√≠sticas do sistema"
    echo ""
    echo "üö® RESET E LIMPEZA (PERIGOSO!):"
    echo "  factory-reset         Reset completo de f√°brica (APAGA TUDO!)"
    echo "  clean-data            Limpar dados (backups, logs, relat√≥rios)"
    echo ""
    echo "üí° Para usar comandos avan√ßados:"
    echo "  $0 [COMANDO] [OP√á√ïES]"
    echo ""
    echo "üîß Para desenvolvimento completo:"
    echo "  make help"
}

# =============================================================================
# FUN√á√ÉO PRINCIPAL
# =============================================================================

main() {
    # Verificar se foi passado algum argumento
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi

    # Processar argumentos
    case "$1" in
        setup)
            run_setup
            ;;
        config)
            run_config
            ;;
        schedule)
            run_schedule
            ;;
        volumes)
            run_volumes
            ;;
        services)
            run_services
            ;;
        backup)
            run_backup
            ;;
        backup-list)
            run_backup_list
            ;;
        backup-list-config)
            run_backup_list_config
            ;;
        backup-restore)
            run_backup_restore "$2"
            ;;
        recovery)
            run_recovery
            ;;
        status)
            run_status
            ;;
        test)
            run_test_system
            ;;
        install)
            run_install
            ;;
        uninstall)
            run_uninstall
            ;;

        logs)
            run_logs_simple
            ;;
        report)
            run_report_simple
            ;;
        advanced)
            run_advanced_help
            ;;
        factory-reset)
            run_factory_reset
            ;;
        clean-data)
            run_clean_data
            ;;
        automation)
            run_automation "$2"
            ;;
        version)
            run_version
            ;;
        changelog)
            run_changelog
            ;;
        compatibility)
            run_compatibility
            ;;
        stats)
            run_stats
            ;;
        --help|-h|help)
            show_help
            ;;
        *)
            echo "‚ùå Comando inv√°lido: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
