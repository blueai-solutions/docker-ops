#!/bin/bash

# Script Principal do Sistema de Backup Docker
# ===========================================
# Autor: Assistente IA
# Data: $(date)

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üê≥ Sistema de Backup Docker - Script Principal"
    echo "=============================================="
    echo ""
    echo "Uso: $0 [COMANDO] [OP√á√ïES]"
    echo ""
    echo "COMANDOS PRINCIPAIS:"
    echo "  backup          Executar backup din√¢mico"
    echo "  recover         Recuperar containers"
    echo "  status          Verificar status dos containers"
    echo "  logs            Analisar logs do sistema"
    echo "  report          Gerar relat√≥rios"
    echo "  notify-test     Testar notifica√ß√µes"
    echo "  monitor         Monitorar logs em tempo real"
    echo "  cleanup         Limpar logs e backups antigos"
    echo ""
    echo "COMANDOS DE BACKUP:"
    echo "  backup run      Executar backup completo"
    echo "  backup list     Listar backups dispon√≠veis"
    echo "  backup restore  Restaurar backup espec√≠fico"
    echo ""
    echo "COMANDOS DE LOGS:"
    echo "  logs --last-24h     Logs das √∫ltimas 24 horas"
    echo "  logs --errors       Apenas erros"
    echo "  logs --performance  An√°lise de performance"
    echo "  logs --stats        Estat√≠sticas gerais"
    echo "  logs --search TEXT  Buscar nos logs"
    echo ""
    echo "COMANDOS DE RELAT√ìRIOS:"
    echo "  report html     Gerar relat√≥rio HTML"
    echo "  report text     Gerar relat√≥rio de texto"
    echo "  report export   Exportar dados"
    echo ""
    echo "COMANDOS DE CONFIGURA√á√ÉO:"
    echo "  config edit       Editar configura√ß√µes"
    echo "  config containers Configurar containers para backup (interativo)"
    echo "  config preview    Preview da configura√ß√£o de containers"
    echo "  config validate   Validar configura√ß√£o de containers"
    echo "  config reset      Resetar configura√ß√£o de containers"
    echo "  config test       Testar configura√ß√µes"
    echo "  config backups    Gerenciar backups de configura√ß√£o"
    echo ""
    echo "COMANDOS DE VERS√ÉO:"
    echo "  version               Mostrar informa√ß√µes da vers√£o"
    echo "  changelog [vers√£o]    Mostrar changelog"
    echo "  changelog-manager     Gerenciar changelogs (criar, listar, validar)"
    echo "  compatibility         Verificar compatibilidade"
    echo "  update-check          Verificar atualiza√ß√µes"
    echo "  stats                 Mostrar estat√≠sticas do sistema"
    echo "  validate              Validar configura√ß√µes"
    echo ""
    echo "COMANDOS DE BACKUP DIN√ÇMICO (RECOMENDADO):"
    echo "  dynamic backup        Executar backup din√¢mico"
    echo "  dynamic list          Listar containers configurados"
    echo "  dynamic validate      Validar configura√ß√£o din√¢mica"
    echo "  dynamic test          Testar backup din√¢mico"
    echo ""
    echo "COMANDOS DE RECUPERA√á√ÉO:"
    echo "  recovery config       Configurar recupera√ß√£o (interativo)"
    echo "  recovery preview      Preview da configura√ß√£o de recupera√ß√£o"
    echo "  recovery validate     Validar configura√ß√£o de recupera√ß√£o"
    echo "  recovery reset        Resetar configura√ß√£o de recupera√ß√£o"
    echo "  recovery start        Iniciar recupera√ß√£o de containers"
    echo "  recovery stop         Parar recupera√ß√£o de containers"
    echo "  recovery status       Status da recupera√ß√£o"
    echo "  recovery logs         Logs da recupera√ß√£o"
    echo "  recovery list         Listar containers configurados"
    echo ""
    echo "COMANDOS DE AUTOMA√á√ÉO (LaunchAgent):"
    echo "  automa√ß√£o install     Instalar LaunchAgent para backup autom√°tico"
    echo "  automa√ß√£o status      Verificar status do LaunchAgent"
    echo "  automa√ß√£o uninstall   Desinstalar LaunchAgent"
    echo "  automa√ß√£o test        Testar script de backup do LaunchAgent"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 backup"
    echo "  $0 logs --errors"
    echo "  $0 report html"
    echo "  $0 monitor"
    echo "  $0 recovery config"
    echo "  $0 recovery start"
    echo "  $0 automa√ß√£o install"
    echo "  $0 automa√ß√£o status"
    echo ""
    echo "Para mais detalhes sobre um comando espec√≠fico:"
    echo "  $0 [COMANDO] --help"
}

# Fun√ß√£o para executar backup (redireciona para dynamic backup)
run_backup() {
    echo "üöÄ Executando backup din√¢mico..."
    run_dynamic_backup backup
}

# Fun√ß√£o para recuperar containers
run_recover() {
    echo "üîÑ Recuperando containers..."
    "$SCRIPT_DIR/scripts/core/recover.sh" recover
}

# Fun√ß√£o para verificar status
run_status() {
    echo "üìä Verificando status dos containers..."
    "$SCRIPT_DIR/scripts/core/recover.sh" status
}

# Fun√ß√£o para analisar logs
run_logs() {
    echo "üìù Analisando logs..."
    "$SCRIPT_DIR/scripts/logging/log-analyzer.sh" "$@"
}

# Fun√ß√£o para gerar relat√≥rios
run_report() {
    local report_type="$1"
    
    case "$report_type" in
        html)
            echo "üìä Gerando relat√≥rio HTML..."
            "$SCRIPT_DIR/scripts/logging/report-generator.sh"
            ;;
        text)
            echo "üìÑ Gerando relat√≥rio de texto..."
            "$SCRIPT_DIR/scripts/logging/log-analyzer.sh" --export
            ;;
        export)
            echo "üì§ Exportando dados..."
            "$SCRIPT_DIR/scripts/logging/log-analyzer.sh" --export
            ;;
        *)
            echo "‚ùå Tipo de relat√≥rio inv√°lido. Use: html, text, ou export"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para testar notifica√ß√µes
run_test() {
    echo "üß™ Testando notifica√ß√µes..."
    "$SCRIPT_DIR/scripts/notifications/test-notifications.sh"
}

# Fun√ß√£o para monitorar logs
run_monitor() {
    echo "üëÄ Monitorando logs em tempo real..."
    "$SCRIPT_DIR/scripts/logging/log-analyzer.sh" --monitor
}

# Fun√ß√£o para limpeza
run_cleanup() {
    echo "üßπ Limpando logs e backups antigos..."
    "$SCRIPT_DIR/scripts/logging/log-analyzer.sh" --cleanup
    "$SCRIPT_DIR/scripts/core/recover.sh" clean
}

# Fun√ß√£o para comandos de backup
run_backup_commands() {
    local subcommand="$1"
    shift
    
    case "$subcommand" in
        run)
            run_backup
            ;;
        list)
            echo "üì¶ Listando backups dispon√≠veis..."
            "$SCRIPT_DIR/scripts/core/recover.sh" list
            ;;
        restore)
            local backup_file="$1"
            if [ -z "$backup_file" ]; then
                echo "‚ùå Erro: Especifique o arquivo de backup para restaurar"
                echo "Uso: $0 backup restore [arquivo.tar.gz]"
                exit 1
            fi
            echo "üîÑ Restaurando backup: $backup_file"
            "$SCRIPT_DIR/scripts/core/recover.sh" restore "$backup_file"
            ;;
        *)
            echo "‚ùå Comando de backup inv√°lido. Use: run, list, ou restore"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para comandos de configura√ß√£o
run_config() {
    local subcommand="$1"
    shift
    
    case "$subcommand" in
        edit)
            echo "‚öôÔ∏è  Editando configura√ß√µes..."
            if command -v nano >/dev/null 2>&1; then
                nano "$SCRIPT_DIR/config/notification-config.sh"
            elif command -v vim >/dev/null 2>&1; then
                vim "$SCRIPT_DIR/config/notification-config.sh"
            else
                echo "‚ùå Nenhum editor encontrado. Edite manualmente:"
                echo "   $SCRIPT_DIR/config/notification-config.sh"
            fi
            ;;
        containers)
            echo "üê≥ Configurador de Containers para Backup"
            echo "========================================="
            "$SCRIPT_DIR/scripts/utils/container-configurator.sh" "$@"
            ;;
        preview)
            echo "üìã Preview da Configura√ß√£o de Containers"
            echo "======================================="
            "$SCRIPT_DIR/scripts/utils/container-configurator.sh" --preview
            ;;
        validate)
            echo "üîç Validando Configura√ß√£o de Containers"
            echo "======================================"
            "$SCRIPT_DIR/scripts/utils/container-configurator.sh" --validate
            ;;
        reset)
            echo "üîÑ Resetando Configura√ß√£o de Containers"
            echo "======================================"
            "$SCRIPT_DIR/scripts/utils/container-configurator.sh" --reset
            ;;
        test)
            run_test
            ;;
        backups)
            echo "üìÅ Gerenciador de Backups de Configura√ß√£o"
            echo "========================================="
            "$SCRIPT_DIR/scripts/utils/config-backup-manager.sh" "$@"
            ;;
        *)
            echo "‚ùå Comando de configura√ß√£o inv√°lido. Use: edit, containers, preview, validate, reset, test ou backups"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para comandos de vers√£o
run_version() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        show_version
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

run_changelog() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        show_changelog "$1"
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

run_compatibility() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        check_compatibility
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

run_update_check() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        check_for_updates
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

run_stats() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        show_system_stats
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

run_validate() {
    local version_utils="$SCRIPT_DIR/scripts/utils/version-utils.sh"
    if [ -f "$version_utils" ]; then
        source "$version_utils"
        validate_config
    else
        echo "‚ùå Utilit√°rios de vers√£o n√£o encontrados"
        exit 1
    fi
}

# Fun√ß√£o para backup din√¢mico
run_dynamic_backup() {
    local dynamic_backup="$SCRIPT_DIR/scripts/backup/dynamic-backup.sh"
    if [ -f "$dynamic_backup" ]; then
        "$dynamic_backup" "$@"
    else
        echo "‚ùå Script de backup din√¢mico n√£o encontrado"
        exit 1
    fi
}

# Fun√ß√£o para comandos de recupera√ß√£o
run_recovery() {
    local subcommand="$1"
    shift
    
    case "$subcommand" in
        config)
            echo "üîÑ Configurador de Recupera√ß√£o de Containers"
            echo "============================================"
            "$SCRIPT_DIR/scripts/utils/recovery-configurator.sh" "$@"
            ;;
        preview)
            echo "üìã Preview da Configura√ß√£o de Recupera√ß√£o"
            echo "======================================="
            "$SCRIPT_DIR/scripts/utils/recovery-configurator.sh" --preview
            ;;
        validate)
            echo "üîç Validando Configura√ß√£o de Recupera√ß√£o"
            echo "======================================"
            "$SCRIPT_DIR/scripts/utils/recovery-configurator.sh" --validate
            ;;
        reset)
            echo "üîÑ Resetando Configura√ß√£o de Recupera√ß√£o"
            echo "======================================"
            "$SCRIPT_DIR/scripts/utils/recovery-configurator.sh" --reset
            ;;
        start)
            echo "üöÄ Iniciando Recupera√ß√£o de Containers"
            echo "====================================="
            "$SCRIPT_DIR/scripts/core/recover.sh" recover
            ;;
        stop)
            echo "üõë Parando Recupera√ß√£o de Containers"
            echo "==================================="
            "$SCRIPT_DIR/scripts/core/manage-containers.sh" stop
            ;;
        status)
            echo "üìä Status da Recupera√ß√£o"
            echo "======================="
            "$SCRIPT_DIR/scripts/core/manage-containers.sh" status
            ;;
        logs)
            echo "üìù Logs da Recupera√ß√£o"
            echo "====================="
            "$SCRIPT_DIR/scripts/core/manage-containers.sh" logs
            ;;
        list)
            echo "üìã Listando Containers Configurados para Recupera√ß√£o"
            echo "=================================================="
            if [ -f "$SCRIPT_DIR/config/recovery-config.sh" ]; then
                source "$SCRIPT_DIR/config/recovery-config.sh"
                if [ ${#RECOVERY_TARGETS[@]} -gt 0 ]; then
                    echo ""
                    echo "üî¥ Alta Prioridade:"
                    for target in "${RECOVERY_TARGETS[@]}"; do
                        local parts=($(echo "$target" | tr ':' '\n'))
                        if [ ${#parts[@]} -ge 5 ] && [ "${parts[2]}" = "1" ]; then
                            local service_type="${parts[5]:-unknown}"
                            echo "  - ${parts[0]} (${parts[3]}s, health: ${parts[4]}, type: $service_type)"
                        fi
                    done
                    echo ""
                    echo "üü° M√©dia Prioridade:"
                    for target in "${RECOVERY_TARGETS[@]}"; do
                        local parts=($(echo "$target" | tr ':' '\n'))
                        if [ ${#parts[@]} -ge 5 ] && [ "${parts[2]}" = "2" ]; then
                            local service_type="${parts[5]:-unknown}"
                            echo "  - ${parts[0]} (${parts[3]}s, health: ${parts[4]}, type: $service_type)"
                        fi
                    done
                    echo ""
                    echo "üü¢ Baixa Prioridade:"
                    for target in "${RECOVERY_TARGETS[@]}"; do
                        local parts=($(echo "$target" | tr ':' '\n'))
                        if [ ${#parts[@]} -ge 5 ] && [ "${parts[2]}" = "3" ]; then
                            local service_type="${parts[5]:-unknown}"
                            echo "  - ${parts[0]} (${parts[3]}s, health: ${parts[4]}, type: $service_type)"
                        fi
                    done
                else
                    echo "Nenhum container configurado para recupera√ß√£o"
                fi
            else
                echo "Arquivo de configura√ß√£o n√£o encontrado"
            fi
            ;;
        *)
            echo "‚ùå Subcomando inv√°lido. Use: config, preview, validate, reset, start, stop, status, logs, list"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para gerenciar changelogs
run_changelog_manager() {
    local changelog_manager="$SCRIPT_DIR/scripts/utils/changelog-manager.sh"
    if [ -f "$changelog_manager" ]; then
        "$changelog_manager" "$@"
    else
        echo "‚ùå Gerenciador de changelog n√£o encontrado"
        exit 1
    fi
}

# Fun√ß√£o para gerenciar automa√ß√£o (LaunchAgent)
run_automation() {
    local subcommand="$1"
    local launchagent_script="$SCRIPT_DIR/scripts/utils/install-launchagent.sh"
    
    # Verificar se o script existe
    if [ ! -f "$launchagent_script" ]; then
        echo "‚ùå Script de LaunchAgent n√£o encontrado: $launchagent_script"
        exit 1
    fi
    
    # Verificar se estamos no macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
        echo "‚ö†Ô∏è  LaunchAgent √© espec√≠fico do macOS"
        echo "üí° Use cron jobs em outros sistemas operacionais"
        exit 1
    fi
    
    case "$subcommand" in
        install)
            echo "üîß Instalando LaunchAgent para backup autom√°tico..."
            "$launchagent_script" install
            ;;
        status)
            echo "üìä Verificando status do LaunchAgent..."
            "$launchagent_script" status
            ;;
        uninstall)
            echo "üóëÔ∏è  Desinstalando LaunchAgent..."
            "$launchagent_script" uninstall
            ;;
        test)
            echo "üß™ Testando script de backup do LaunchAgent..."
            "$launchagent_script" test
            ;;
        --help|-h|help)
            echo "üîß Comandos de Automa√ß√£o (LaunchAgent)"
            echo "====================================="
            echo ""
            echo "Uso: $0 automa√ß√£o [COMANDO]"
            echo ""
            echo "COMANDOS:"
            echo "  install     Instalar LaunchAgent para backup autom√°tico"
            echo "  status      Verificar status do LaunchAgent"
            echo "  uninstall   Desinstalar LaunchAgent"
            echo "  test        Testar script de backup do LaunchAgent"
            echo ""
            echo "EXEMPLOS:"
            echo "  $0 automa√ß√£o install"
            echo "  $0 automa√ß√£o status"
            echo "  $0 automa√ß√£o uninstall"
            echo "  $0 automa√ß√£o test"
            echo ""
            echo "NOTA: LaunchAgent √© espec√≠fico do macOS"
            ;;
        *)
            echo "‚ùå Comando de automa√ß√£o desconhecido: $subcommand"
            echo ""
            echo "üí° Use: $0 automa√ß√£o --help"
            exit 1
            ;;
    esac
}

# Fun√ß√£o principal
main() {
    local command="$1"
    shift
    
    # Se nenhum comando foi especificado, mostrar ajuda
    if [ -z "$command" ]; then
        show_help
        exit 0
    fi
    
    # Processar comando
    case "$command" in
        backup)
            if [ "$1" = "run" ] || [ "$1" = "list" ] || [ "$1" = "restore" ]; then
                run_backup_commands "$@"
            else
                run_backup
            fi
            ;;
        recover)
            run_recover
            ;;
        status)
            run_status
            ;;
        logs)
            run_logs "$@"
            ;;
        report)
            run_report "$@"
            ;;
        notify-test)
            run_test
            ;;
        monitor)
            run_monitor
            ;;
        cleanup)
            run_cleanup
            ;;
        config)
            run_config "$@"
            ;;
        version)
            run_version
            ;;
        changelog)
            run_changelog "$@"
            ;;
        changelog-manager)
            run_changelog_manager "$@"
            ;;
        compatibility)
            run_compatibility
            ;;
        update-check)
            run_update_check
            ;;
        stats)
            run_stats
            ;;
        validate)
            run_validate
            ;;
        dynamic)
            run_dynamic_backup "$@"
            ;;
        recovery)
            run_recovery "$@"
            ;;
        automa√ß√£o|automacao|automation)
            run_automation "$@"
            ;;
        --help|-h|help)
            show_help
            ;;
        *)
            echo "‚ùå Comando desconhecido: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
