#!/bin/bash

# =============================================================================
# GERENCIADOR DE CHANGELOG DO SISTEMA DE BACKUP DOCKER
# =============================================================================

# Definir diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Carregar configura√ß√£o de vers√£o
VERSION_CONFIG="$PROJECT_ROOT/config/version-config.sh"
if [ -f "$VERSION_CONFIG" ]; then
    source "$VERSION_CONFIG"
else
    echo "‚ùå Arquivo de configura√ß√£o de vers√£o n√£o encontrado"
    exit 1
fi

# Diret√≥rio de changelogs
CHANGELOG_DIR="$PROJECT_ROOT/docs/changelog"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üê≥ Gerenciador de Changelog - $SYSTEM_NAME"
    echo "=========================================="
    echo ""
    echo "üìã Uso: $0 [comando] [op√ß√µes]"
    echo ""
    echo "üîß Comandos dispon√≠veis:"
    echo "  create <vers√£o>     - Criar novo changelog para vers√£o"
    echo "  list               - Listar todos os changelogs"
    echo "  show <vers√£o>      - Mostrar changelog espec√≠fico"
    echo "  update <vers√£o>    - Atualizar changelog existente"
    echo "  template           - Mostrar template de changelog"
    echo "  validate           - Validar todos os changelogs"
    echo "  stats              - Estat√≠sticas dos changelogs"
    echo "  help               - Mostrar esta ajuda"
    echo ""
    echo "üìù Exemplos:"
    echo "  $0 create 2.1.0"
    echo "  $0 show 2.0.0"
    echo "  $0 list"
    echo "  $0 validate"
}

# Fun√ß√£o para criar novo changelog
create_changelog() {
    local version="$1"
    
    if [ -z "$version" ]; then
        echo "‚ùå Erro: Vers√£o n√£o especificada"
        echo "üí° Use: $0 create <vers√£o>"
        return 1
    fi
    
    # Validar formato da vers√£o
    if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "‚ùå Erro: Formato de vers√£o inv√°lido"
        echo "üí° Use formato: X.Y.Z (ex: 2.1.0)"
        return 1
    fi
    
    local changelog_file="$CHANGELOG_DIR/v${version}.md"
    
    if [ -f "$changelog_file" ]; then
        echo "‚ö†Ô∏è  Changelog para v$version j√° existe"
        read -p "Deseja sobrescrever? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "‚ùå Opera√ß√£o cancelada"
            return 1
        fi
    fi
    
    # Criar diret√≥rio se n√£o existir
    mkdir -p "$CHANGELOG_DIR"
    
    # Criar template do changelog
    cat > "$changelog_file" << EOF
# Changelog v$version

**Data de Release:** $(date +%Y-%m-%d)  
**Vers√£o:** $version  
**Tipo:** [Major/Minor/Patch] Release  
**Compatibilidade:** macOS 10.15+, Docker 20.0+  

## üéâ Novas Funcionalidades

- [ ] Nova funcionalidade 1
- [ ] Nova funcionalidade 2

## üîß Melhorias

- [ ] Melhoria 1
- [ ] Melhoria 2

## üêõ Corre√ß√µes

- [ ] Corre√ß√£o 1
- [ ] Corre√ß√£o 2

## üìä Estat√≠sticas da Vers√£o

### Arquivos e C√≥digo
- **Arquivos modificados:** 0
- **Linhas de c√≥digo:** 0
- **Documenta√ß√£o:** 0 documentos
- **Testes:** 0/0 aprovados
- **Compatibilidade:** 100%

### Funcionalidades
- **Comandos adicionados:** 0
- **Configura√ß√µes:** 0 op√ß√µes
- **N√≠veis de log:** 0
- **Tipos de notifica√ß√£o:** 0
- **Formatos de relat√≥rio:** 0

### Qualidade
- **Cobertura de testes:** 0%
- **Documenta√ß√£o:** B√°sica
- **Compatibilidade:** Universal
- **Performance:** Otimizada
- **Usabilidade:** Intuitiva

## üîó Links √öteis

- [Guia de In√≠cio R√°pido](../guia-inicio-rapido.md)
- [Comandos Dispon√≠veis](../comandos.md)
- [Arquitetura do Sistema](../arquitetura.md)
- [Solu√ß√£o de Problemas](../solucao-problemas.md)
- [Documenta√ß√£o Completa](../README.md)

## üë• Contribuidores

- **Desenvolvedor** - Descri√ß√£o da contribui√ß√£o

## üéØ Impacto da Vers√£o

Descri√ß√£o do impacto desta vers√£o no sistema.

---

*"Mensagem de impacto da vers√£o"*
EOF

    echo "‚úÖ Changelog criado: $changelog_file"
    echo "üìù Edite o arquivo para adicionar as mudan√ßas da vers√£o"
}

# Fun√ß√£o para listar changelogs
list_changelogs() {
    echo "üìã Changelogs Dispon√≠veis"
    echo "========================="
    echo ""
    
    if [ ! -d "$CHANGELOG_DIR" ]; then
        echo "‚ùå Diret√≥rio de changelogs n√£o encontrado"
        return 1
    fi
    
    local changelogs=($(ls "$CHANGELOG_DIR"/v*.md 2>/dev/null | sort -V))
    
    if [ ${#changelogs[@]} -eq 0 ]; then
        echo "üì≠ Nenhum changelog encontrado"
        return 0
    fi
    
    for changelog in "${changelogs[@]}"; do
        local version=$(basename "$changelog" .md | sed 's/v//')
        local size=$(wc -c < "$changelog" | tr -d ' ')
        local lines=$(wc -l < "$changelog" | tr -d ' ')
        local date=$(grep "Data de Release:" "$changelog" | head -1 | sed 's/.*Data de Release: *//' | sed 's/ .*//')
        
        echo "üìÑ v$version"
        echo "   üìÖ Data: $date"
        echo "   üìè Tamanho: $size bytes ($lines linhas)"
        echo "   üìÅ Arquivo: $(basename "$changelog")"
        echo ""
    done
    
    echo "üìä Total: ${#changelogs[@]} changelog(s)"
}

# Fun√ß√£o para mostrar changelog espec√≠fico
show_changelog() {
    local version="$1"
    
    if [ -z "$version" ]; then
        echo "‚ùå Erro: Vers√£o n√£o especificada"
        echo "üí° Use: $0 show <vers√£o>"
        return 1
    fi
    
    local changelog_file="$CHANGELOG_DIR/v${version}.md"
    
    if [ -f "$changelog_file" ]; then
        echo "üìã Changelog v$version"
        echo "====================="
        echo ""
        cat "$changelog_file"
    else
        echo "‚ùå Changelog para v$version n√£o encontrado"
        echo ""
        echo "üìã Vers√µes dispon√≠veis:"
        list_changelogs
        return 1
    fi
}

# Fun√ß√£o para atualizar changelog
update_changelog() {
    local version="$1"
    
    if [ -z "$version" ]; then
        echo "‚ùå Erro: Vers√£o n√£o especificada"
        echo "üí° Use: $0 update <vers√£o>"
        return 1
    fi
    
    local changelog_file="$CHANGELOG_DIR/v${version}.md"
    
    if [ ! -f "$changelog_file" ]; then
        echo "‚ùå Changelog para v$version n√£o encontrado"
        echo "üí° Use: $0 create $version para criar"
        return 1
    fi
    
    # Abrir editor
    if command -v code >/dev/null 2>&1; then
        code "$changelog_file"
    elif command -v nano >/dev/null 2>&1; then
        nano "$changelog_file"
    elif command -v vim >/dev/null 2>&1; then
        vim "$changelog_file"
    else
        echo "üìù Arquivo: $changelog_file"
        echo "üí° Abra o arquivo em seu editor preferido"
    fi
}

# Fun√ß√£o para mostrar template
show_template() {
    echo "üìã Template de Changelog"
    echo "========================"
    echo ""
    cat << 'EOF'
# Changelog vX.Y.Z

**Data de Release:** YYYY-MM-DD  
**Vers√£o:** X.Y.Z  
**Tipo:** [Major/Minor/Patch] Release  
**Compatibilidade:** macOS 10.15+, Docker 20.0+  

## üéâ Novas Funcionalidades

- [ ] Nova funcionalidade 1
- [ ] Nova funcionalidade 2

## üîß Melhorias

- [ ] Melhoria 1
- [ ] Melhoria 2

## üêõ Corre√ß√µes

- [ ] Corre√ß√£o 1
- [ ] Corre√ß√£o 2

## üìä Estat√≠sticas da Vers√£o

### Arquivos e C√≥digo
- **Arquivos modificados:** 0
- **Linhas de c√≥digo:** 0
- **Documenta√ß√£o:** 0 documentos
- **Testes:** 0/0 aprovados
- **Compatibilidade:** 100%

### Funcionalidades
- **Comandos adicionados:** 0
- **Configura√ß√µes:** 0 op√ß√µes
- **N√≠veis de log:** 0
- **Tipos de notifica√ß√£o:** 0
- **Formatos de relat√≥rio:** 0

### Qualidade
- **Cobertura de testes:** 0%
- **Documenta√ß√£o:** B√°sica
- **Compatibilidade:** Universal
- **Performance:** Otimizada
- **Usabilidade:** Intuitiva

## üîó Links √öteis

- [Guia de In√≠cio R√°pido](../guia-inicio-rapido.md)
- [Comandos Dispon√≠veis](../comandos.md)
- [Arquitetura do Sistema](../arquitetura.md)
- [Solu√ß√£o de Problemas](../solucao-problemas.md)
- [Documenta√ß√£o Completa](../README.md)

## üë• Contribuidores

- **Desenvolvedor** - Descri√ß√£o da contribui√ß√£o

## üéØ Impacto da Vers√£o

Descri√ß√£o do impacto desta vers√£o no sistema.

---

*"Mensagem de impacto da vers√£o"*
EOF
}

# Fun√ß√£o para validar changelogs
validate_changelogs() {
    echo "üîç Validando Changelogs"
    echo "======================"
    echo ""
    
    if [ ! -d "$CHANGELOG_DIR" ]; then
        echo "‚ùå Diret√≥rio de changelogs n√£o encontrado"
        return 1
    fi
    
    local changelogs=($(ls "$CHANGELOG_DIR"/v*.md 2>/dev/null | sort -V))
    local valid_count=0
    local total_count=${#changelogs[@]}
    
    if [ $total_count -eq 0 ]; then
        echo "üì≠ Nenhum changelog encontrado"
        return 0
    fi
    
    for changelog in "${changelogs[@]}"; do
        local version=$(basename "$changelog" .md | sed 's/v//')
        local errors=0
        
        echo "üîç Validando v$version..."
        
        # Verificar se arquivo n√£o est√° vazio
        if [ ! -s "$changelog" ]; then
            echo "  ‚ùå Arquivo vazio"
            ((errors++))
        fi
        
        # Verificar campos obrigat√≥rios
        if ! grep -q "Data de Release:" "$changelog"; then
            echo "  ‚ùå Campo 'Data de Release' n√£o encontrado"
            ((errors++))
        fi
        
        if ! grep -q "Vers√£o:" "$changelog"; then
            echo "  ‚ùå Campo 'Vers√£o' n√£o encontrado"
            ((errors++))
        fi
        
        if ! grep -q "Tipo:" "$changelog"; then
            echo "  ‚ùå Campo 'Tipo' n√£o encontrado"
            ((errors++))
        fi
        
        # Verificar se√ß√µes obrigat√≥rias
        if ! grep -q "## üéâ Novas Funcionalidades" "$changelog"; then
            echo "  ‚ùå Se√ß√£o 'Novas Funcionalidades' n√£o encontrada"
            ((errors++))
        fi
        
        if ! grep -q "## üîß Melhorias" "$changelog"; then
            echo "  ‚ùå Se√ß√£o 'Melhorias' n√£o encontrada"
            ((errors++))
        fi
        
        if ! grep -q "## üêõ Corre√ß√µes" "$changelog"; then
            echo "  ‚ùå Se√ß√£o 'Corre√ß√µes' n√£o encontrada"
            ((errors++))
        fi
        
        if [ $errors -eq 0 ]; then
            echo "  ‚úÖ V√°lido"
            ((valid_count++))
        else
            echo "  ‚ùå $errors erro(s) encontrado(s)"
        fi
        echo ""
    done
    
    echo "üìä Resultado da Valida√ß√£o:"
    echo "  ‚úÖ V√°lidos: $valid_count/$total_count"
    echo "  ‚ùå Inv√°lidos: $((total_count - valid_count))/$total_count"
    
    if [ $valid_count -eq $total_count ]; then
        echo "üéâ Todos os changelogs est√£o v√°lidos!"
        return 0
    else
        echo "‚ö†Ô∏è  Alguns changelogs precisam de corre√ß√£o"
        return 1
    fi
}

# Fun√ß√£o para estat√≠sticas
show_stats() {
    echo "üìä Estat√≠sticas dos Changelogs"
    echo "============================="
    echo ""
    
    if [ ! -d "$CHANGELOG_DIR" ]; then
        echo "‚ùå Diret√≥rio de changelogs n√£o encontrado"
        return 1
    fi
    
    local changelogs=($(ls "$CHANGELOG_DIR"/v*.md 2>/dev/null | sort -V))
    local total_count=${#changelogs[@]}
    
    if [ $total_count -eq 0 ]; then
        echo "üì≠ Nenhum changelog encontrado"
        return 0
    fi
    
    local total_size=0
    local total_lines=0
    local versions=()
    
    for changelog in "${changelogs[@]}"; do
        local size=$(wc -c < "$changelog" | tr -d ' ')
        local lines=$(wc -l < "$changelog" | tr -d ' ')
        local version=$(basename "$changelog" .md | sed 's/v//')
        
        total_size=$((total_size + size))
        total_lines=$((total_lines + lines))
        versions+=("$version")
    done
    
    echo "üìà Informa√ß√µes Gerais:"
    echo "  Total de changelogs: $total_count"
    echo "  Tamanho total: $total_size bytes"
    echo "  Linhas totais: $total_lines"
    echo "  Tamanho m√©dio: $((total_size / total_count)) bytes"
    echo "  Linhas m√©dias: $((total_lines / total_count))"
    echo ""
    
    echo "üìã Vers√µes:"
    for version in "${versions[@]}"; do
        echo "  - v$version"
    done
    echo ""
    
    echo "üìÖ Timeline:"
    for changelog in "${changelogs[@]}"; do
        local version=$(basename "$changelog" .md | sed 's/v//')
        local date=$(grep "Data de Release:" "$changelog" | head -1 | sed 's/.*Data de Release: *//' | sed 's/ .*//')
        echo "  v$version: $date"
    done
}

# Fun√ß√£o principal
main() {
    local command="$1"
    local version="$2"
    
    case "$command" in
        create)
            create_changelog "$version"
            ;;
        list)
            list_changelogs
            ;;
        show)
            show_changelog "$version"
            ;;
        update)
            update_changelog "$version"
            ;;
        template)
            show_template
            ;;
        validate)
            validate_changelogs
            ;;
        stats)
            show_stats
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo "‚ùå Comando desconhecido: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
