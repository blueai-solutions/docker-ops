#!/bin/bash

# =============================================================================
# GERENCIADOR DE BACKUPS DE CONFIGURA√á√ÉO
# =============================================================================

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
BACKUP_CONFIG_DIR="$PROJECT_ROOT/config/backups"

# Carregar fun√ß√µes de logging
source "$SCRIPT_DIR/../logging/logging-functions.sh"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üìÅ Gerenciador de Backups de Configura√ß√£o"
    echo "========================================="
    echo ""
    echo "Uso: $0 [comando] [op√ß√µes]"
    echo ""
    echo "COMANDOS:"
    echo "  list                    Listar backups dispon√≠veis"
    echo "  restore <arquivo>       Restaurar backup espec√≠fico"
    echo "  clean [dias]           Limpar backups antigos (padr√£o: 30 dias)"
    echo "  info <arquivo>         Mostrar informa√ß√µes do backup"
    echo "  diff <arquivo>         Comparar backup com configura√ß√£o atual"
    echo "  help                   Mostrar esta ajuda"
    echo ""
    echo "EXEMPLOS:"
    echo "  $0 list"
    echo "  $0 restore backup-config.sh.backup.20250829_190021"
    echo "  $0 clean 7"
    echo "  $0 info backup-config.sh.backup.20250829_190021"
}

# Fun√ß√£o para listar backups
list_backups() {
    echo "üìã Backups de Configura√ß√£o Dispon√≠veis"
    echo "====================================="
    echo ""
    
    if [ ! -d "$BACKUP_CONFIG_DIR" ]; then
        echo "‚ùå Pasta de backups n√£o encontrada: $BACKUP_CONFIG_DIR"
        return 1
    fi
    
    local backups=()
    while IFS= read -r -d '' backup; do
        backups+=("$backup")
    done < <(find "$BACKUP_CONFIG_DIR" -name "*.backup.*" -type f -print0 | sort -z)
    
    if [ ${#backups[@]} -eq 0 ]; then
        echo "üì≠ Nenhum backup encontrado"
        return 0
    fi
    
    echo "üìÅ Pasta: $BACKUP_CONFIG_DIR"
    echo ""
    
    for backup in "${backups[@]}"; do
        local filename=$(basename "$backup")
        local size=$(du -h "$backup" 2>/dev/null | awk '{print $1}' || echo "N/A")
        local date=$(stat -f "%Sm" -t "%d/%m/%Y %H:%M" "$backup" 2>/dev/null || stat -c "%y" "$backup" 2>/dev/null | cut -d' ' -f1,2 || echo "N/A")
        
        echo "üìÑ $filename"
        echo "   üìè Tamanho: $size"
        echo "   üìÖ Data: $date"
        echo ""
    done
}

# Fun√ß√£o para restaurar backup
restore_backup() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        echo "‚ùå Erro: Especifique o arquivo de backup para restaurar"
        echo "Uso: $0 restore <arquivo>"
        return 1
    fi
    
    local backup_path="$BACKUP_CONFIG_DIR/$backup_file"
    
    if [ ! -f "$backup_path" ]; then
        echo "‚ùå Erro: Arquivo de backup n√£o encontrado: $backup_path"
        return 1
    fi
    
    # Determinar tipo de configura√ß√£o
    local config_type=""
    if [[ "$backup_file" == *"backup-config"* ]]; then
        config_type="backup"
        local target_config="$PROJECT_ROOT/config/backup-config.sh"
    elif [[ "$backup_file" == *"recovery-config"* ]]; then
        config_type="recovery"
        local target_config="$PROJECT_ROOT/config/recovery-config.sh"
    else
        echo "‚ùå Erro: Tipo de configura√ß√£o n√£o reconhecido"
        return 1
    fi
    
    echo "üîÑ Restaurando configura√ß√£o $config_type..."
    echo "üìÑ Backup: $backup_file"
    echo "üéØ Destino: $target_config"
    echo ""
    
    # Fazer backup da configura√ß√£o atual
    if [ -f "$target_config" ]; then
        local current_backup="$BACKUP_CONFIG_DIR/$(basename "$target_config").backup.$(date +%Y%m%d_%H%M%S)"
        cp "$target_config" "$current_backup"
        echo "üíæ Backup da configura√ß√£o atual criado: $(basename "$current_backup")"
    fi
    
    # Restaurar backup
    cp "$backup_path" "$target_config"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Configura√ß√£o $config_type restaurada com sucesso!"
        echo "üí° Use './blueai-docker-ops.sh volumes' para verificar"
    else
        echo "‚ùå Erro ao restaurar configura√ß√£o"
        return 1
    fi
}

# Fun√ß√£o para limpar backups antigos
clean_old_backups() {
    local days="${1:-30}"
    
    echo "üßπ Limpando backups mais antigos que $days dias..."
    echo ""
    
    if [ ! -d "$BACKUP_CONFIG_DIR" ]; then
        echo "‚ùå Pasta de backups n√£o encontrada"
        return 1
    fi
    
    local deleted_count=0
    
    # Encontrar e remover backups antigos
    while IFS= read -r -d '' backup; do
        local filename=$(basename "$backup")
        echo "üóëÔ∏è  Removendo: $filename"
        rm "$backup"
        ((deleted_count++))
    done < <(find "$BACKUP_CONFIG_DIR" -name "*.backup.*" -type f -mtime +$days -print0)
    
    if [ $deleted_count -eq 0 ]; then
        echo "‚úÖ Nenhum backup antigo encontrado"
    else
        echo "‚úÖ $deleted_count backup(s) removido(s)"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do backup
show_backup_info() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        echo "‚ùå Erro: Especifique o arquivo de backup"
        echo "Uso: $0 info <arquivo>"
        return 1
    fi
    
    local backup_path="$BACKUP_CONFIG_DIR/$backup_file"
    
    if [ ! -f "$backup_path" ]; then
        echo "‚ùå Erro: Arquivo de backup n√£o encontrado: $backup_path"
        return 1
    fi
    
    echo "üìÑ Informa√ß√µes do Backup"
    echo "======================="
    echo ""
    echo "üìÅ Arquivo: $backup_file"
    echo "üìè Tamanho: $(du -h "$backup_path" | awk '{print $1}')"
    echo "üìÖ Data: $(stat -f "%Sm" -t "%d/%m/%Y %H:%M:%S" "$backup_path" 2>/dev/null || stat -c "%y" "$backup_path" 2>/dev/null)"
    echo ""
    
    # Mostrar primeiras linhas do arquivo
    echo "üìã Conte√∫do (primeiras 20 linhas):"
    echo "-----------------------------------"
    head -20 "$backup_path"
}

# Fun√ß√£o para comparar backup com configura√ß√£o atual
compare_backup() {
    local backup_file="$1"
    
    if [ -z "$backup_file" ]; then
        echo "‚ùå Erro: Especifique o arquivo de backup"
        echo "Uso: $0 diff <arquivo>"
        return 1
    fi
    
    local backup_path="$BACKUP_CONFIG_DIR/$backup_file"
    
    if [ ! -f "$backup_path" ]; then
        echo "‚ùå Erro: Arquivo de backup n√£o encontrado: $backup_path"
        return 1
    fi
    
    # Determinar configura√ß√£o atual
    local config_type=""
    local current_config=""
    
    if [[ "$backup_file" == *"backup-config"* ]]; then
        config_type="backup"
        current_config="$PROJECT_ROOT/config/backup-config.sh"
    elif [[ "$backup_file" == *"recovery-config"* ]]; then
        config_type="recovery"
        current_config="$PROJECT_ROOT/config/recovery-config.sh"
    else
        echo "‚ùå Erro: Tipo de configura√ß√£o n√£o reconhecido"
        return 1
    fi
    
    if [ ! -f "$current_config" ]; then
        echo "‚ùå Erro: Configura√ß√£o atual n√£o encontrada: $current_config"
        return 1
    fi
    
    echo "üîç Comparando configura√ß√£o $config_type"
    echo "====================================="
    echo ""
    echo "üìÑ Backup: $backup_file"
    echo "üìÑ Atual: $(basename "$current_config")"
    echo ""
    
    # Verificar se diff est√° dispon√≠vel
    if command -v diff >/dev/null 2>&1; then
        diff "$backup_path" "$current_config" || echo "‚úÖ Arquivos s√£o id√™nticos"
    else
        echo "‚ö†Ô∏è  Comando 'diff' n√£o dispon√≠vel"
        echo "üí° Instale diffutils para comparar arquivos"
    fi
}

# Fun√ß√£o principal
main() {
    local command="$1"
    shift
    
    case "$command" in
        list)
            list_backups
            ;;
        restore)
            restore_backup "$1"
            ;;
        clean)
            clean_old_backups "$1"
            ;;
        info)
            show_backup_info "$1"
            ;;
        diff)
            compare_backup "$1"
            ;;
        help|--help|-h|"")
            show_help
            ;;
        *)
            echo "‚ùå Comando inv√°lido: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
